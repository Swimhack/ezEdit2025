{
  "timestamp": "2025-07-22T21:42:32.880Z",
  "files": {
    "signup.html": {
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sign Up - EzEdit.co</title>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js\"></script>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background: #f8fafc;\n            color: #1f2937;\n            line-height: 1.6;\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n        }\n        \n        .header {\n            padding: 1rem 0;\n            background: white;\n            border-bottom: 1px solid #e5e7eb;\n        }\n        \n        .nav-container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 0 2rem;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n        \n        .logo {\n            display: flex;\n            align-items: center;\n            font-weight: 700;\n            font-size: 1.5rem;\n            text-decoration: none;\n            color: #1f2937;\n        }\n        \n        .logo-icon {\n            background: #3b82f6;\n            color: white;\n            width: 40px;\n            height: 40px;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-right: 0.5rem;\n            font-weight: 700;\n            font-size: 1.2rem;\n        }\n        \n        .nav-links {\n            display: flex;\n            list-style: none;\n            gap: 2rem;\n            align-items: center;\n        }\n        \n        .nav-links a {\n            text-decoration: none;\n            color: #6b7280;\n            font-weight: 500;\n            transition: color 0.2s;\n        }\n        \n        .nav-links a:hover {\n            color: #3b82f6;\n        }\n        \n        .auth-buttons {\n            display: flex;\n            gap: 1rem;\n            align-items: center;\n        }\n        \n        .btn {\n            padding: 0.75rem 1.5rem;\n            border-radius: 8px;\n            font-weight: 600;\n            text-decoration: none;\n            transition: all 0.2s;\n            border: none;\n            cursor: pointer;\n            font-size: 0.95rem;\n        }\n        \n        .btn-ghost {\n            background: transparent;\n            color: #6b7280;\n        }\n        \n        .btn-primary {\n            background: #3b82f6;\n            color: white;\n        }\n        \n        .btn-primary:hover {\n            background: #2563eb;\n        }\n        \n        .main-content {\n            flex: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 2rem;\n        }\n        \n        .signup-container {\n            background: white;\n            border-radius: 12px;\n            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n            padding: 3rem;\n            width: 100%;\n            max-width: 450px;\n            border: 1px solid #e5e7eb;\n        }\n        \n        .signup-header {\n            text-align: center;\n            margin-bottom: 2rem;\n        }\n        \n        .signup-header h1 {\n            font-size: 1.75rem;\n            font-weight: 700;\n            color: #1f2937;\n            margin-bottom: 0.5rem;\n        }\n        \n        .signup-header p {\n            color: #6b7280;\n            font-size: 1rem;\n        }\n        \n        .selected-plan {\n            background: #f0f9ff;\n            border: 1px solid #bae6fd;\n            border-radius: 8px;\n            padding: 1rem;\n            margin-bottom: 2rem;\n            text-align: center;\n        }\n        \n        .plan-name {\n            font-weight: 600;\n            color: #0369a1;\n            margin-bottom: 0.25rem;\n        }\n        \n        .plan-price {\n            color: #0284c7;\n            font-size: 0.9rem;\n        }\n        \n        .signup-form {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        .form-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .form-label {\n            font-weight: 500;\n            color: #374151;\n            font-size: 0.95rem;\n        }\n        \n        .form-input {\n            padding: 0.875rem 1rem;\n            border: 2px solid #e5e7eb;\n            border-radius: 8px;\n            font-size: 1rem;\n            transition: all 0.2s;\n            background: #ffffff;\n        }\n        \n        .form-input:focus {\n            outline: none;\n            border-color: #3b82f6;\n            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n        }\n        \n        .form-input::placeholder {\n            color: #9ca3af;\n        }\n        \n        .password-container {\n            position: relative;\n        }\n        \n        .password-toggle {\n            position: absolute;\n            right: 1rem;\n            top: 50%;\n            transform: translateY(-50%);\n            background: none;\n            border: none;\n            color: #6b7280;\n            cursor: pointer;\n            font-size: 1.2rem;\n            padding: 0.25rem;\n        }\n        \n        .password-strength {\n            margin-top: 0.5rem;\n            font-size: 0.85rem;\n        }\n        \n        .strength-weak {\n            color: #dc2626;\n        }\n        \n        .strength-medium {\n            color: #fbbf24;\n        }\n        \n        .strength-strong {\n            color: #16a34a;\n        }\n        \n        .terms-checkbox {\n            display: flex;\n            align-items: start;\n            gap: 0.75rem;\n            margin: 1rem 0;\n        }\n        \n        .terms-checkbox input[type=\"checkbox\"] {\n            width: 1.1rem;\n            height: 1.1rem;\n            accent-color: #3b82f6;\n            margin-top: 0.125rem;\n        }\n        \n        .terms-checkbox label {\n            color: #6b7280;\n            font-size: 0.9rem;\n            line-height: 1.4;\n        }\n        \n        .terms-checkbox a {\n            color: #3b82f6;\n            text-decoration: none;\n        }\n        \n        .terms-checkbox a:hover {\n            text-decoration: underline;\n        }\n        \n        .signup-button {\n            background: #3b82f6;\n            color: white;\n            padding: 1rem;\n            border: none;\n            border-radius: 8px;\n            font-weight: 600;\n            font-size: 1rem;\n            cursor: pointer;\n            transition: background 0.2s;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 0.5rem;\n        }\n        \n        .signup-button:hover {\n            background: #2563eb;\n        }\n        \n        .signup-button:disabled {\n            background: #9ca3af;\n            cursor: not-allowed;\n        }\n        \n        .login-link {\n            text-align: center;\n            margin-top: 1.5rem;\n            color: #6b7280;\n            font-size: 0.95rem;\n        }\n        \n        .login-link a {\n            color: #3b82f6;\n            text-decoration: none;\n            font-weight: 500;\n        }\n        \n        .login-link a:hover {\n            text-decoration: underline;\n        }\n        \n        .error-message {\n            background: #fef2f2;\n            border: 1px solid #fecaca;\n            color: #dc2626;\n            padding: 0.75rem;\n            border-radius: 8px;\n            font-size: 0.9rem;\n            display: none;\n        }\n        \n        .success-message {\n            background: #f0fdf4;\n            border: 1px solid #bbf7d0;\n            color: #16a34a;\n            padding: 0.75rem;\n            border-radius: 8px;\n            font-size: 0.9rem;\n            display: none;\n        }\n        \n        .spinner {\n            display: inline-block;\n            width: 1rem;\n            height: 1rem;\n            border: 2px solid #ffffff;\n            border-radius: 50%;\n            border-top-color: transparent;\n            animation: spin 1s ease-in-out infinite;\n        }\n        \n        @keyframes spin {\n            to { transform: rotate(360deg); }\n        }\n        \n        .trial-badge {\n            background: #16a34a;\n            color: white;\n            font-size: 0.75rem;\n            padding: 0.25rem 0.5rem;\n            border-radius: 4px;\n            font-weight: 500;\n            margin-left: 0.5rem;\n        }\n        \n        @media (max-width: 480px) {\n            .signup-container {\n                padding: 2rem 1.5rem;\n                margin: 1rem;\n            }\n            \n            .nav-container {\n                padding: 0 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header class=\"header\">\n        <nav class=\"nav-container\">\n            <a href=\"/\" class=\"logo\">\n                <div class=\"logo-icon\">Ez</div>\n                EzEdit.co\n            </a>\n            \n            <ul class=\"nav-links\">\n                <li><a href=\"/#features\">Features</a></li>\n                <li><a href=\"/pricing.html\">Pricing</a></li>\n                <li><a href=\"#docs\">Docs</a></li>\n            </ul>\n            \n            <div class=\"auth-buttons\">\n                <a href=\"/login-real.html\" class=\"btn btn-ghost\">Log in</a>\n            </div>\n        </nav>\n    </header>\n    \n    <main class=\"main-content\">\n        <div class=\"signup-container\">\n            <div class=\"signup-header\">\n                <h1>Create your account</h1>\n                <p>Start your 7-day free trial <span class=\"trial-badge\">No Credit Card</span></p>\n            </div>\n            \n            <div class=\"selected-plan\" id=\"selected-plan\" style=\"display: none;\">\n                <div class=\"plan-name\" id=\"plan-name\">Pro Plan Selected</div>\n                <div class=\"plan-price\" id=\"plan-price\">$50/month after trial</div>\n            </div>\n            \n            <div class=\"error-message\" id=\"error-message\"></div>\n            <div class=\"success-message\" id=\"success-message\"></div>\n            \n            <form class=\"signup-form\" id=\"signup-form\">\n                <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"fullname\">Full Name</label>\n                    <input \n                        type=\"text\" \n                        id=\"fullname\" \n                        name=\"fullname\" \n                        class=\"form-input\" \n                        placeholder=\"John Smith\" \n                        required \n                        autocomplete=\"name\"\n                    >\n                </div>\n                \n                <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"email\">Email Address</label>\n                    <input \n                        type=\"email\" \n                        id=\"email\" \n                        name=\"email\" \n                        class=\"form-input\" \n                        placeholder=\"john@company.com\" \n                        required \n                        autocomplete=\"email\"\n                    >\n                </div>\n                \n                <div class=\"form-group\">\n                    <label class=\"form-label\" for=\"password\">Password</label>\n                    <div class=\"password-container\">\n                        <input \n                            type=\"password\" \n                            id=\"password\" \n                            name=\"password\" \n                            class=\"form-input\" \n                            placeholder=\"Create a strong password\" \n                            required \n                            autocomplete=\"new-password\"\n                        >\n                        <button type=\"button\" class=\"password-toggle\" id=\"password-toggle\">👁</button>\n                    </div>\n                    <div class=\"password-strength\" id=\"password-strength\"></div>\n                </div>\n                \n                <div class=\"terms-checkbox\">\n                    <input type=\"checkbox\" id=\"terms\" name=\"terms\" required>\n                    <label for=\"terms\">\n                        I agree to the <a href=\"/terms\" target=\"_blank\">Terms of Service</a> \n                        and <a href=\"/privacy\" target=\"_blank\">Privacy Policy</a>\n                    </label>\n                </div>\n                \n                <div class=\"terms-checkbox\">\n                    <input type=\"checkbox\" id=\"marketing\" name=\"marketing\">\n                    <label for=\"marketing\">\n                        Send me product updates and tips (optional)\n                    </label>\n                </div>\n                \n                <button type=\"submit\" class=\"signup-button\" id=\"signup-button\">\n                    <span id=\"signup-text\">Start Free Trial</span>\n                    <span id=\"signup-spinner\" class=\"spinner\" style=\"display: none;\"></span>\n                </button>\n            </form>\n            \n            <div class=\"login-link\">\n                Already have an account? <a href=\"/login-real.html\">Sign in</a>\n            </div>\n        </div>\n    </main>\n    \n    <script>\n        // Initialize Supabase\n        const supabaseUrl = 'https://sctsykgcfkhadowygcrj.supabase.co';\n        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNjdHN5a2djZmtoYWRvd3lnY3JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE1OTE5MDUsImV4cCI6MjA2NzE2NzkwNX0.8cpoEx0MXO0kkTqDrpkbYRhXQHVQ0bmjHA0xI2rUWqY';\n        const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);\n        \n        // Check for selected plan\n        let selectedPlan = null;\n        window.addEventListener('load', function() {\n            const planData = localStorage.getItem('selected_plan');\n            if (planData) {\n                selectedPlan = JSON.parse(planData);\n                showSelectedPlan(selectedPlan);\n            }\n        });\n        \n        // Show selected plan\n        function showSelectedPlan(plan) {\n            const planElement = document.getElementById('selected-plan');\n            const planName = document.getElementById('plan-name');\n            const planPrice = document.getElementById('plan-price');\n            \n            if (plan.plan === 'pro') {\n                planName.textContent = 'Pro Plan Selected';\n                planPrice.textContent = plan.billing === 'yearly' ? '$40/month after trial (billed yearly)' : '$50/month after trial';\n            } else if (plan.plan === 'lifetime') {\n                planName.textContent = 'Lifetime Plan Selected';\n                planPrice.textContent = '$497 one-time after trial';\n            }\n            \n            planElement.style.display = 'block';\n        }\n        \n        // Password visibility toggle\n        const passwordInput = document.getElementById('password');\n        const passwordToggle = document.getElementById('password-toggle');\n        \n        passwordToggle.addEventListener('click', function() {\n            if (passwordInput.type === 'password') {\n                passwordInput.type = 'text';\n                passwordToggle.textContent = '🙈';\n            } else {\n                passwordInput.type = 'password';\n                passwordToggle.textContent = '👁';\n            }\n        });\n        \n        // Password strength indicator\n        passwordInput.addEventListener('input', function() {\n            const password = this.value;\n            const strengthElement = document.getElementById('password-strength');\n            \n            if (password.length === 0) {\n                strengthElement.textContent = '';\n                return;\n            }\n            \n            let score = 0;\n            if (password.length >= 8) score++;\n            if (/[a-z]/.test(password) && /[A-Z]/.test(password)) score++;\n            if (/\\d/.test(password)) score++;\n            if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) score++;\n            \n            if (score < 2) {\n                strengthElement.textContent = 'Weak password';\n                strengthElement.className = 'password-strength strength-weak';\n            } else if (score < 4) {\n                strengthElement.textContent = 'Medium strength';\n                strengthElement.className = 'password-strength strength-medium';\n            } else {\n                strengthElement.textContent = 'Strong password';\n                strengthElement.className = 'password-strength strength-strong';\n            }\n        });\n        \n        // Form submission\n        const signupForm = document.getElementById('signup-form');\n        const signupButton = document.getElementById('signup-button');\n        const signupText = document.getElementById('signup-text');\n        const signupSpinner = document.getElementById('signup-spinner');\n        const errorMessage = document.getElementById('error-message');\n        const successMessage = document.getElementById('success-message');\n        \n        signupForm.addEventListener('submit', async function(e) {\n            e.preventDefault();\n            \n            // Hide previous messages\n            errorMessage.style.display = 'none';\n            successMessage.style.display = 'none';\n            \n            // Show loading state\n            signupButton.disabled = true;\n            signupText.style.display = 'none';\n            signupSpinner.style.display = 'inline-block';\n            \n            const fullname = document.getElementById('fullname').value;\n            const email = document.getElementById('email').value;\n            const password = document.getElementById('password').value;\n            const marketing = document.getElementById('marketing').checked;\n            \n            try {\n                // Create account with Supabase\n                const { data, error } = await supabase.auth.signUp({\n                    email: email,\n                    password: password,\n                    options: {\n                        data: {\n                            full_name: fullname,\n                            marketing_consent: marketing\n                        }\n                    }\n                });\n                \n                if (error) {\n                    throw error;\n                }\n                \n                if (data.user) {\n                    // Create user profile in database\n                    const { error: profileError } = await supabase\n                        .from('user_profiles')\n                        .insert([\n                            {\n                                id: data.user.id,\n                                full_name: fullname,\n                                email: email,\n                                trial_started_at: new Date().toISOString(),\n                                trial_ends_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),\n                                subscription_status: 'trial',\n                                marketing_consent: marketing\n                            }\n                        ]);\n                    \n                    if (profileError && profileError.code !== '23505') { // Ignore duplicate key error\n                        console.error('Profile creation error:', profileError);\n                    }\n                    \n                    if (data.user.email_confirmed_at) {\n                        // Email already confirmed, redirect directly\n                        successMessage.textContent = 'Account created successfully! Redirecting to dashboard...';\n                        successMessage.style.display = 'block';\n                        \n                        setTimeout(() => {\n                            if (selectedPlan) {\n                                localStorage.setItem('selected_plan', JSON.stringify(selectedPlan));\n                                window.location.href = '/pricing.html';\n                            } else {\n                                window.location.href = '/dashboard-real.html';\n                            }\n                        }, 2000);\n                    } else {\n                        // Email confirmation required\n                        successMessage.innerHTML = `\n                            <strong>Account created successfully!</strong><br>\n                            Please check your email and click the confirmation link to activate your account.\n                        `;\n                        successMessage.style.display = 'block';\n                        \n                        // Store selected plan for after confirmation\n                        if (selectedPlan) {\n                            localStorage.setItem('selected_plan', JSON.stringify(selectedPlan));\n                        }\n                    }\n                }\n                \n            } catch (error) {\n                console.error('Signup error:', error);\n                \n                let errorMsg = 'Account creation failed. Please try again.';\n                if (error.message.includes('already registered')) {\n                    errorMsg = 'An account with this email already exists. <a href=\"/login-real.html\">Sign in instead</a>';\n                } else if (error.message.includes('Password')) {\n                    errorMsg = 'Password must be at least 6 characters long.';\n                } else if (error.message.includes('email')) {\n                    errorMsg = 'Please enter a valid email address.';\n                } else if (error.message.includes('rate limit')) {\n                    errorMsg = 'Too many attempts. Please wait a few minutes and try again.';\n                }\n                \n                errorMessage.innerHTML = errorMsg;\n                errorMessage.style.display = 'block';\n            } finally {\n                // Reset button state\n                signupButton.disabled = false;\n                signupText.style.display = 'inline';\n                signupSpinner.style.display = 'none';\n            }\n        });\n        \n        // Check if already logged in\n        async function checkAuth() {\n            const { data: { session } } = await supabase.auth.getSession();\n            if (session?.user) {\n                if (selectedPlan) {\n                    window.location.href = '/pricing.html';\n                } else {\n                    window.location.href = '/dashboard-real.html';\n                }\n            }\n        }\n        \n        // Listen for auth changes\n        supabase.auth.onAuthStateChange((event, session) => {\n            if (event === 'SIGNED_IN' && session) {\n                if (selectedPlan) {\n                    localStorage.setItem('selected_plan', JSON.stringify(selectedPlan));\n                    window.location.href = '/pricing.html';\n                } else {\n                    window.location.href = '/dashboard-real.html';\n                }\n            }\n        });\n        \n        // Initialize\n        checkAuth();\n    </script>\n</body>\n</html>",
      "size": "22.9KB",
      "targetPath": "/var/www/html/signup.html",
      "hash": "158ed16ed49d91794dfe94b118ea1ab4"
    },
    "pricing.html": {
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Pricing - EzEdit.co</title>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n    <script src=\"https://js.stripe.com/v3/\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js\"></script>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background: #ffffff;\n            color: #1f2937;\n            line-height: 1.6;\n        }\n        \n        .header {\n            padding: 1rem 0;\n            background: white;\n            border-bottom: 1px solid #e5e7eb;\n        }\n        \n        .nav-container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 0 2rem;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n        \n        .logo {\n            display: flex;\n            align-items: center;\n            font-weight: 700;\n            font-size: 1.5rem;\n            text-decoration: none;\n            color: #1f2937;\n        }\n        \n        .logo-icon {\n            background: #3b82f6;\n            color: white;\n            width: 40px;\n            height: 40px;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-right: 0.5rem;\n            font-weight: 700;\n            font-size: 1.2rem;\n        }\n        \n        .nav-links {\n            display: flex;\n            list-style: none;\n            gap: 2rem;\n            align-items: center;\n        }\n        \n        .nav-links a {\n            text-decoration: none;\n            color: #6b7280;\n            font-weight: 500;\n            transition: color 0.2s;\n        }\n        \n        .nav-links a:hover, .nav-links a.active {\n            color: #3b82f6;\n        }\n        \n        .auth-buttons {\n            display: flex;\n            gap: 1rem;\n            align-items: center;\n        }\n        \n        .btn {\n            padding: 0.75rem 1.5rem;\n            border-radius: 8px;\n            font-weight: 600;\n            text-decoration: none;\n            transition: all 0.2s;\n            border: none;\n            cursor: pointer;\n            font-size: 0.95rem;\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n        }\n        \n        .btn-ghost {\n            background: transparent;\n            color: #6b7280;\n        }\n        \n        .btn-ghost:hover {\n            color: #3b82f6;\n        }\n        \n        .btn-primary {\n            background: #3b82f6;\n            color: white;\n        }\n        \n        .btn-primary:hover {\n            background: #2563eb;\n        }\n        \n        .btn-success {\n            background: #16a34a;\n            color: white;\n        }\n        \n        .btn-success:hover {\n            background: #15803d;\n        }\n        \n        .btn-outline {\n            background: white;\n            color: #6b7280;\n            border: 2px solid #e5e7eb;\n        }\n        \n        .btn-outline:hover {\n            border-color: #3b82f6;\n            color: #3b82f6;\n        }\n        \n        .hero {\n            padding: 4rem 0;\n            text-align: center;\n            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);\n        }\n        \n        .hero-container {\n            max-width: 900px;\n            margin: 0 auto;\n            padding: 0 2rem;\n        }\n        \n        .hero h1 {\n            font-size: 3rem;\n            font-weight: 700;\n            margin-bottom: 1rem;\n            line-height: 1.1;\n        }\n        \n        .hero p {\n            font-size: 1.2rem;\n            color: #6b7280;\n            margin-bottom: 2rem;\n        }\n        \n        .pricing-section {\n            padding: 4rem 0;\n            background: white;\n        }\n        \n        .pricing-container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 0 2rem;\n        }\n        \n        .pricing-toggle {\n            display: flex;\n            justify-content: center;\n            margin-bottom: 3rem;\n        }\n        \n        .toggle-wrapper {\n            background: #f3f4f6;\n            border-radius: 8px;\n            padding: 0.25rem;\n            display: flex;\n        }\n        \n        .toggle-option {\n            padding: 0.75rem 1.5rem;\n            border-radius: 6px;\n            cursor: pointer;\n            transition: all 0.2s;\n            font-weight: 500;\n        }\n        \n        .toggle-option.active {\n            background: white;\n            color: #3b82f6;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n        }\n        \n        .pricing-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 2rem;\n            max-width: 1000px;\n            margin: 0 auto;\n        }\n        \n        .pricing-card {\n            background: white;\n            border: 2px solid #e5e7eb;\n            border-radius: 12px;\n            padding: 2rem;\n            text-align: center;\n            position: relative;\n            transition: all 0.2s;\n        }\n        \n        .pricing-card:hover {\n            border-color: #3b82f6;\n            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.1);\n        }\n        \n        .pricing-card.featured {\n            border-color: #3b82f6;\n            box-shadow: 0 10px 25px rgba(59, 130, 246, 0.15);\n            transform: scale(1.05);\n        }\n        \n        .plan-badge {\n            background: #3b82f6;\n            color: white;\n            padding: 0.5rem 1rem;\n            border-radius: 20px;\n            font-size: 0.85rem;\n            font-weight: 600;\n            position: absolute;\n            top: -0.75rem;\n            left: 50%;\n            transform: translateX(-50%);\n        }\n        \n        .plan-name {\n            font-size: 1.5rem;\n            font-weight: 700;\n            margin-bottom: 0.5rem;\n            color: #1f2937;\n        }\n        \n        .plan-description {\n            color: #6b7280;\n            margin-bottom: 2rem;\n            font-size: 0.95rem;\n        }\n        \n        .plan-price {\n            margin-bottom: 2rem;\n        }\n        \n        .price-amount {\n            font-size: 3rem;\n            font-weight: 700;\n            color: #1f2937;\n        }\n        \n        .price-period {\n            color: #6b7280;\n            font-size: 1rem;\n        }\n        \n        .original-price {\n            color: #9ca3af;\n            text-decoration: line-through;\n            font-size: 1.2rem;\n            margin-right: 0.5rem;\n        }\n        \n        .plan-features {\n            list-style: none;\n            margin-bottom: 2rem;\n            text-align: left;\n        }\n        \n        .plan-features li {\n            padding: 0.5rem 0;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n        \n        .feature-check {\n            color: #16a34a;\n            font-weight: bold;\n        }\n        \n        .feature-x {\n            color: #dc2626;\n            font-weight: bold;\n        }\n        \n        .cta-button {\n            width: 100%;\n            padding: 1rem;\n            font-size: 1rem;\n            font-weight: 600;\n            margin-bottom: 1rem;\n        }\n        \n        .trial-info {\n            font-size: 0.85rem;\n            color: #6b7280;\n        }\n        \n        .features-section {\n            padding: 4rem 0;\n            background: #f8fafc;\n        }\n        \n        .features-container {\n            max-width: 1200px;\n            margin: 0 auto;\n            padding: 0 2rem;\n            text-align: center;\n        }\n        \n        .features-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 2rem;\n            margin-top: 3rem;\n        }\n        \n        .feature-card {\n            background: white;\n            padding: 2rem;\n            border-radius: 12px;\n            text-align: center;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);\n        }\n        \n        .feature-icon {\n            background: #3b82f6;\n            color: white;\n            width: 60px;\n            height: 60px;\n            border-radius: 12px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin: 0 auto 1rem;\n            font-size: 1.5rem;\n        }\n        \n        .faq-section {\n            padding: 4rem 0;\n            background: white;\n        }\n        \n        .faq-container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 0 2rem;\n        }\n        \n        .faq-item {\n            border-bottom: 1px solid #e5e7eb;\n            padding: 1.5rem 0;\n        }\n        \n        .faq-question {\n            font-weight: 600;\n            cursor: pointer;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .faq-answer {\n            margin-top: 1rem;\n            color: #6b7280;\n            display: none;\n        }\n        \n        .faq-item.active .faq-answer {\n            display: block;\n        }\n        \n        .loading {\n            display: none;\n            align-items: center;\n            justify-content: center;\n            gap: 0.5rem;\n        }\n        \n        .spinner {\n            border: 2px solid #f3f3f3;\n            border-top: 2px solid #3b82f6;\n            border-radius: 50%;\n            width: 1rem;\n            height: 1rem;\n            animation: spin 1s linear infinite;\n        }\n        \n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n        \n        @media (max-width: 768px) {\n            .hero h1 {\n                font-size: 2rem;\n            }\n            \n            .pricing-grid {\n                grid-template-columns: 1fr;\n            }\n            \n            .pricing-card.featured {\n                transform: none;\n            }\n            \n            .nav-container {\n                padding: 0 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header class=\"header\">\n        <nav class=\"nav-container\">\n            <a href=\"/\" class=\"logo\">\n                <div class=\"logo-icon\">Ez</div>\n                EzEdit.co\n            </a>\n            \n            <ul class=\"nav-links\">\n                <li><a href=\"/#features\">Features</a></li>\n                <li><a href=\"/pricing.html\" class=\"active\">Pricing</a></li>\n                <li><a href=\"#docs\">Docs</a></li>\n            </ul>\n            \n            <div class=\"auth-buttons\">\n                <a href=\"/login-real.html\" class=\"btn btn-ghost\">Log in</a>\n                <a href=\"/signup.html\" class=\"btn btn-primary\">Sign up</a>\n            </div>\n        </nav>\n    </header>\n    \n    <main>\n        <section class=\"hero\">\n            <div class=\"hero-container\">\n                <h1>Simple, Transparent Pricing</h1>\n                <p>Choose the plan that fits your needs. Start with a 7-day free trial, no credit card required.</p>\n            </div>\n        </section>\n        \n        <section class=\"pricing-section\">\n            <div class=\"pricing-container\">\n                <div class=\"pricing-toggle\">\n                    <div class=\"toggle-wrapper\">\n                        <div class=\"toggle-option active\" data-billing=\"monthly\">Monthly</div>\n                        <div class=\"toggle-option\" data-billing=\"yearly\">Yearly (Save 20%)</div>\n                    </div>\n                </div>\n                \n                <div class=\"pricing-grid\">\n                    <!-- Free Trial -->\n                    <div class=\"pricing-card\">\n                        <div class=\"plan-name\">Free Trial</div>\n                        <div class=\"plan-description\">Perfect for trying out EzEdit</div>\n                        \n                        <div class=\"plan-price\">\n                            <div class=\"price-amount\">$0</div>\n                            <div class=\"price-period\">7 days free</div>\n                        </div>\n                        \n                        <ul class=\"plan-features\">\n                            <li><span class=\"feature-check\">✓</span> Connect up to 3 FTP sites</li>\n                            <li><span class=\"feature-check\">✓</span> Browse and edit files</li>\n                            <li><span class=\"feature-check\">✓</span> AI assistant (10 queries/day)</li>\n                            <li><span class=\"feature-x\">✗</span> Save changes to server</li>\n                            <li><span class=\"feature-x\">✗</span> Team collaboration</li>\n                        </ul>\n                        \n                        <button class=\"btn btn-outline cta-button\" onclick=\"startFreeTrial()\">\n                            Start Free Trial\n                        </button>\n                        <div class=\"trial-info\">No credit card required</div>\n                    </div>\n                    \n                    <!-- Pro Plan -->\n                    <div class=\"pricing-card featured\">\n                        <div class=\"plan-badge\">Most Popular</div>\n                        <div class=\"plan-name\">Pro</div>\n                        <div class=\"plan-description\">For professional developers and agencies</div>\n                        \n                        <div class=\"plan-price\" id=\"pro-price\">\n                            <div class=\"price-amount\">$50</div>\n                            <div class=\"price-period\">/month</div>\n                        </div>\n                        \n                        <ul class=\"plan-features\">\n                            <li><span class=\"feature-check\">✓</span> Unlimited FTP sites</li>\n                            <li><span class=\"feature-check\">✓</span> Full save & publish access</li>\n                            <li><span class=\"feature-check\">✓</span> Unlimited AI assistance</li>\n                            <li><span class=\"feature-check\">✓</span> Team collaboration (5 members)</li>\n                            <li><span class=\"feature-check\">✓</span> Priority support</li>\n                            <li><span class=\"feature-check\">✓</span> Advanced file operations</li>\n                        </ul>\n                        \n                        <button class=\"btn btn-primary cta-button\" onclick=\"selectPlan('pro', 'monthly')\" id=\"pro-cta\">\n                            <span class=\"loading\" id=\"pro-loading\">\n                                <div class=\"spinner\"></div>\n                                Processing...\n                            </span>\n                            <span id=\"pro-text\">Choose Pro</span>\n                        </button>\n                        <div class=\"trial-info\">7-day free trial included</div>\n                    </div>\n                    \n                    <!-- Lifetime Plan -->\n                    <div class=\"pricing-card\">\n                        <div class=\"plan-name\">Lifetime</div>\n                        <div class=\"plan-description\">One-time purchase for single domain</div>\n                        \n                        <div class=\"plan-price\">\n                            <div class=\"price-amount\">$497</div>\n                            <div class=\"price-period\">one-time</div>\n                        </div>\n                        \n                        <ul class=\"plan-features\">\n                            <li><span class=\"feature-check\">✓</span> Single domain license</li>\n                            <li><span class=\"feature-check\">✓</span> All Pro features</li>\n                            <li><span class=\"feature-check\">✓</span> Lifetime updates</li>\n                            <li><span class=\"feature-check\">✓</span> Priority support</li>\n                            <li><span class=\"feature-x\">✗</span> Team collaboration</li>\n                        </ul>\n                        \n                        <button class=\"btn btn-success cta-button\" onclick=\"selectPlan('lifetime', 'one-time')\" id=\"lifetime-cta\">\n                            <span class=\"loading\" id=\"lifetime-loading\">\n                                <div class=\"spinner\"></div>\n                                Processing...\n                            </span>\n                            <span id=\"lifetime-text\">Buy Lifetime</span>\n                        </button>\n                        <div class=\"trial-info\">Perfect for single-site owners</div>\n                    </div>\n                </div>\n            </div>\n        </section>\n        \n        <section class=\"features-section\">\n            <div class=\"features-container\">\n                <h2>Why Choose EzEdit Pro?</h2>\n                <div class=\"features-grid\">\n                    <div class=\"feature-card\">\n                        <div class=\"feature-icon\">💰</div>\n                        <h3>Save Money</h3>\n                        <p>Replace expensive IDEs and hosting tools with one affordable solution.</p>\n                    </div>\n                    \n                    <div class=\"feature-card\">\n                        <div class=\"feature-icon\">⏰</div>\n                        <h3>Save Time</h3>\n                        <p>Edit files directly on your server without downloading, editing, and re-uploading.</p>\n                    </div>\n                    \n                    <div class=\"feature-card\">\n                        <div class=\"feature-icon\">🤖</div>\n                        <h3>AI-Powered</h3>\n                        <p>Klein AI assistant helps with code explanations, bug fixes, and feature development.</p>\n                    </div>\n                    \n                    <div class=\"feature-card\">\n                        <div class=\"feature-icon\">🔒</div>\n                        <h3>Secure</h3>\n                        <p>Enterprise-grade security with encrypted connections and secure credential storage.</p>\n                    </div>\n                </div>\n            </div>\n        </section>\n        \n        <section class=\"faq-section\">\n            <div class=\"faq-container\">\n                <h2 style=\"text-align: center; margin-bottom: 2rem;\">Frequently Asked Questions</h2>\n                \n                <div class=\"faq-item\">\n                    <div class=\"faq-question\" onclick=\"toggleFaq(this)\">\n                        <span>How does the free trial work?</span>\n                        <span>+</span>\n                    </div>\n                    <div class=\"faq-answer\">\n                        You get 7 days of full access to browse and edit files. No credit card required. After the trial, you'll need to upgrade to save changes to your server.\n                    </div>\n                </div>\n                \n                <div class=\"faq-item\">\n                    <div class=\"faq-question\" onclick=\"toggleFaq(this)\">\n                        <span>Can I cancel my subscription anytime?</span>\n                        <span>+</span>\n                    </div>\n                    <div class=\"faq-answer\">\n                        Yes, you can cancel your Pro subscription at any time. You'll retain access until the end of your billing period.\n                    </div>\n                </div>\n                \n                <div class=\"faq-item\">\n                    <div class=\"faq-question\" onclick=\"toggleFaq(this)\">\n                        <span>What FTP servers are supported?</span>\n                        <span>+</span>\n                    </div>\n                    <div class=\"faq-answer\">\n                        EzEdit works with any standard FTP server including shared hosting, VPS, dedicated servers, and cloud platforms like AWS, DigitalOcean, and more.\n                    </div>\n                </div>\n                \n                <div class=\"faq-item\">\n                    <div class=\"faq-question\" onclick=\"toggleFaq(this)\">\n                        <span>Is the lifetime plan really lifetime?</span>\n                        <span>+</span>\n                    </div>\n                    <div class=\"faq-answer\">\n                        Yes! The lifetime plan gives you permanent access to EzEdit for one domain. You'll receive all future updates at no additional cost.\n                    </div>\n                </div>\n                \n                <div class=\"faq-item\">\n                    <div class=\"faq-question\" onclick=\"toggleFaq(this)\">\n                        <span>How does AI assistance work?</span>\n                        <span>+</span>\n                    </div>\n                    <div class=\"faq-answer\">\n                        Klein, our AI assistant, analyzes your code and provides contextual help. It can explain functions, suggest improvements, fix bugs, and help write new features using the latest AI technology.\n                    </div>\n                </div>\n            </div>\n        </section>\n    </main>\n    \n    <script>\n        // Initialize Stripe\n        const stripe = Stripe('pk_live_51R9RpGAuYycpID5hykEKz1PLYpMC5f2xVcejaqipi31fCuAH4Yuwkxaz8oaTW1gxaZKFueKPfxBnj8zmsdhWICM7006c7mCTz2');\n        \n        // Initialize Supabase\n        const supabaseUrl = 'https://sctsykgcfkhadowygcrj.supabase.co';\n        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNjdHN5a2djZmtoYWRvd3lnY3JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE1OTE5MDUsImV4cCI6MjA2NzE2NzkwNX0.8cpoEx0MXO0kkTqDrpkbYRhXQHVQ0bmjHA0xI2rUWqY';\n        const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);\n        \n        // Pricing data\n        const pricing = {\n            pro: {\n                monthly: { amount: 50, priceId: 'price_1QXbhKAuYycpID5hJUv8QE1H' },\n                yearly: { amount: 40, priceId: 'price_1QXbhKAuYycpID5hJUv8QE1H_yearly' }\n            },\n            lifetime: {\n                'one-time': { amount: 497, priceId: 'price_1QXbhKAuYycpID5hJUv8QE1H_lifetime' }\n            }\n        };\n        \n        let currentBilling = 'monthly';\n        \n        // Toggle billing period\n        document.querySelectorAll('.toggle-option').forEach(option => {\n            option.addEventListener('click', function() {\n                document.querySelectorAll('.toggle-option').forEach(o => o.classList.remove('active'));\n                this.classList.add('active');\n                currentBilling = this.dataset.billing;\n                updatePricing();\n            });\n        });\n        \n        // Update pricing display\n        function updatePricing() {\n            const proPrice = document.getElementById('pro-price');\n            \n            if (currentBilling === 'yearly') {\n                proPrice.innerHTML = `\n                    <div class=\"price-amount\">$40</div>\n                    <div class=\"price-period\">/month</div>\n                    <div style=\"margin-top: 0.5rem;\">\n                        <span class=\"original-price\">$50</span>\n                        <span style=\"color: #16a34a; font-weight: 600;\">Save 20%</span>\n                    </div>\n                `;\n            } else {\n                proPrice.innerHTML = `\n                    <div class=\"price-amount\">$50</div>\n                    <div class=\"price-period\">/month</div>\n                `;\n            }\n        }\n        \n        // Start free trial\n        async function startFreeTrial() {\n            const { data: { session } } = await supabase.auth.getSession();\n            if (session?.user) {\n                window.location.href = '/dashboard-real.html';\n            } else {\n                window.location.href = '/signup.html';\n            }\n        }\n        \n        // Select plan and redirect to Stripe\n        async function selectPlan(plan, billing) {\n            const button = document.getElementById(`${plan}-cta`);\n            const loading = document.getElementById(`${plan}-loading`);\n            const text = document.getElementById(`${plan}-text`);\n            \n            // Show loading state\n            loading.style.display = 'flex';\n            text.style.display = 'none';\n            button.disabled = true;\n            \n            try {\n                // Check if user is authenticated\n                const { data: { session } } = await supabase.auth.getSession();\n                if (!session?.user) {\n                    // Store selected plan and redirect to signup\n                    localStorage.setItem('selected_plan', JSON.stringify({ plan, billing }));\n                    window.location.href = '/signup.html';\n                    return;\n                }\n                \n                // Create checkout session\n                const priceId = pricing[plan][billing].priceId;\n                const response = await fetch('/api/create-checkout-session', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${session.access_token}`\n                    },\n                    body: JSON.stringify({\n                        priceId: priceId,\n                        userId: session.user.id,\n                        userEmail: session.user.email,\n                        plan: plan,\n                        billing: billing\n                    })\n                });\n                \n                const { sessionId, error } = await response.json();\n                \n                if (error) {\n                    throw new Error(error);\n                }\n                \n                // Redirect to Stripe Checkout\n                const { error: stripeError } = await stripe.redirectToCheckout({\n                    sessionId: sessionId\n                });\n                \n                if (stripeError) {\n                    throw new Error(stripeError.message);\n                }\n                \n            } catch (error) {\n                console.error('Checkout error:', error);\n                alert('There was an error processing your request. Please try again.');\n            } finally {\n                // Reset button state\n                loading.style.display = 'none';\n                text.style.display = 'inline';\n                button.disabled = false;\n            }\n        }\n        \n        // Toggle FAQ\n        function toggleFaq(element) {\n            const faqItem = element.parentElement;\n            const isActive = faqItem.classList.contains('active');\n            \n            // Close all FAQs\n            document.querySelectorAll('.faq-item').forEach(item => {\n                item.classList.remove('active');\n                item.querySelector('.faq-question span:last-child').textContent = '+';\n            });\n            \n            // Toggle current FAQ\n            if (!isActive) {\n                faqItem.classList.add('active');\n                element.querySelector('span:last-child').textContent = '−';\n            }\n        }\n        \n        // Check for selected plan from signup\n        window.addEventListener('load', function() {\n            const selectedPlan = localStorage.getItem('selected_plan');\n            if (selectedPlan) {\n                const { plan, billing } = JSON.parse(selectedPlan);\n                localStorage.removeItem('selected_plan');\n                setTimeout(() => selectPlan(plan, billing), 1000);\n            }\n        });\n    </script>\n</body>\n</html>",
      "size": "27.3KB",
      "targetPath": "/var/www/html/pricing.html",
      "hash": "0bc2b6ab1b124ba40c208c28ceee7602"
    },
    "billing.html": {
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Billing & Subscription - EzEdit.co</title>\n    <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\" rel=\"stylesheet\">\n    <script src=\"https://js.stripe.com/v3/\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js\"></script>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            background: #f8fafc;\n            color: #1f2937;\n            line-height: 1.6;\n        }\n        \n        .header {\n            background: white;\n            border-bottom: 1px solid #e5e7eb;\n            padding: 0.75rem 0;\n        }\n        \n        .nav-container {\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 0 2rem;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n        \n        .logo {\n            display: flex;\n            align-items: center;\n            font-weight: 700;\n            font-size: 1.5rem;\n            text-decoration: none;\n            color: #1f2937;\n        }\n        \n        .logo-icon {\n            background: #3b82f6;\n            color: white;\n            width: 40px;\n            height: 40px;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-right: 0.5rem;\n            font-weight: 700;\n            font-size: 1.2rem;\n        }\n        \n        .user-menu {\n            display: flex;\n            align-items: center;\n            gap: 1rem;\n        }\n        \n        .user-info {\n            background: #f3f4f6;\n            padding: 0.5rem 1rem;\n            border-radius: 6px;\n            font-size: 0.9rem;\n            color: #6b7280;\n        }\n        \n        .back-btn, .logout-btn {\n            color: #6b7280;\n            text-decoration: none;\n            font-weight: 500;\n            padding: 0.5rem 1rem;\n            border-radius: 6px;\n            transition: all 0.2s;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            cursor: pointer;\n            border: none;\n            background: none;\n        }\n        \n        .back-btn:hover, .logout-btn:hover {\n            background: #f3f4f6;\n            color: #1f2937;\n        }\n        \n        .main-layout {\n            display: flex;\n            min-height: calc(100vh - 73px);\n        }\n        \n        .sidebar {\n            background: white;\n            width: 280px;\n            border-right: 1px solid #e5e7eb;\n            padding: 2rem 0;\n        }\n        \n        .sidebar-title {\n            font-size: 1.25rem;\n            font-weight: 700;\n            color: #1f2937;\n            padding: 0 2rem;\n            margin-bottom: 2rem;\n        }\n        \n        .sidebar-nav {\n            list-style: none;\n        }\n        \n        .sidebar-nav li {\n            margin-bottom: 0.5rem;\n        }\n        \n        .sidebar-nav a {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            padding: 0.875rem 2rem;\n            text-decoration: none;\n            color: #6b7280;\n            font-weight: 500;\n            transition: all 0.2s;\n            border-right: 3px solid transparent;\n        }\n        \n        .sidebar-nav a:hover {\n            background: #f9fafb;\n            color: #1f2937;\n        }\n        \n        .sidebar-nav a.active {\n            background: #f9fafb;\n            color: #3b82f6;\n            border-right-color: #3b82f6;\n        }\n        \n        .sidebar-nav .icon {\n            font-size: 1.1rem;\n            width: 20px;\n            text-align: center;\n        }\n        \n        .main-content {\n            flex: 1;\n            padding: 2rem;\n        }\n        \n        .page-header {\n            margin-bottom: 2rem;\n        }\n        \n        .page-title {\n            font-size: 2rem;\n            font-weight: 700;\n            color: #1f2937;\n            margin-bottom: 0.5rem;\n        }\n        \n        .page-description {\n            color: #6b7280;\n            font-size: 1.1rem;\n        }\n        \n        .billing-cards {\n            display: grid;\n            gap: 2rem;\n            margin-bottom: 3rem;\n        }\n        \n        .billing-card {\n            background: white;\n            border: 1px solid #e5e7eb;\n            border-radius: 12px;\n            padding: 2rem;\n        }\n        \n        .card-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: start;\n            margin-bottom: 1.5rem;\n        }\n        \n        .card-title {\n            font-size: 1.25rem;\n            font-weight: 700;\n            color: #1f2937;\n        }\n        \n        .status-badge {\n            padding: 0.5rem 1rem;\n            border-radius: 6px;\n            font-size: 0.85rem;\n            font-weight: 600;\n        }\n        \n        .status-active {\n            background: #dcfce7;\n            color: #16a34a;\n        }\n        \n        .status-trial {\n            background: #fef3c7;\n            color: #d97706;\n        }\n        \n        .status-canceled {\n            background: #fef2f2;\n            color: #dc2626;\n        }\n        \n        .status-past-due {\n            background: #fef2f2;\n            color: #dc2626;\n        }\n        \n        .subscription-details {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 2rem;\n            margin-bottom: 2rem;\n        }\n        \n        .detail-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .detail-label {\n            font-size: 0.9rem;\n            color: #6b7280;\n            text-transform: uppercase;\n            font-weight: 500;\n        }\n        \n        .detail-value {\n            font-size: 1.1rem;\n            font-weight: 600;\n            color: #1f2937;\n        }\n        \n        .card-actions {\n            display: flex;\n            gap: 1rem;\n            flex-wrap: wrap;\n        }\n        \n        .btn {\n            padding: 0.75rem 1.5rem;\n            border-radius: 8px;\n            font-weight: 600;\n            text-decoration: none;\n            transition: all 0.2s;\n            border: none;\n            cursor: pointer;\n            font-size: 0.95rem;\n            display: inline-flex;\n            align-items: center;\n            justify-content: center;\n            gap: 0.5rem;\n        }\n        \n        .btn-primary {\n            background: #3b82f6;\n            color: white;\n        }\n        \n        .btn-primary:hover {\n            background: #2563eb;\n        }\n        \n        .btn-outline {\n            background: white;\n            color: #6b7280;\n            border: 2px solid #e5e7eb;\n        }\n        \n        .btn-outline:hover {\n            border-color: #3b82f6;\n            color: #3b82f6;\n        }\n        \n        .btn-danger {\n            background: white;\n            color: #dc2626;\n            border: 2px solid #fecaca;\n        }\n        \n        .btn-danger:hover {\n            background: #fef2f2;\n            border-color: #dc2626;\n        }\n        \n        .btn:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n        }\n        \n        .upgrade-card {\n            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);\n            color: white;\n            border: none;\n        }\n        \n        .upgrade-card .card-title {\n            color: white;\n        }\n        \n        .upgrade-card .detail-label {\n            color: rgba(255, 255, 255, 0.8);\n        }\n        \n        .upgrade-card .detail-value {\n            color: white;\n        }\n        \n        .upgrade-card .btn-outline {\n            background: rgba(255, 255, 255, 0.1);\n            color: white;\n            border-color: rgba(255, 255, 255, 0.3);\n        }\n        \n        .upgrade-card .btn-outline:hover {\n            background: rgba(255, 255, 255, 0.2);\n            border-color: white;\n        }\n        \n        .trial-warning {\n            background: #fef3c7;\n            border: 1px solid #fbbf24;\n            border-radius: 8px;\n            padding: 1rem;\n            margin-bottom: 2rem;\n            display: flex;\n            align-items: start;\n            gap: 0.75rem;\n        }\n        \n        .warning-icon {\n            color: #d97706;\n            font-size: 1.2rem;\n            margin-top: 0.1rem;\n        }\n        \n        .warning-content h3 {\n            color: #92400e;\n            font-weight: 600;\n            margin-bottom: 0.25rem;\n        }\n        \n        .warning-content p {\n            color: #92400e;\n            font-size: 0.95rem;\n            margin-bottom: 0.75rem;\n        }\n        \n        .usage-section {\n            margin-top: 3rem;\n        }\n        \n        .usage-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 1.5rem;\n            margin-top: 1.5rem;\n        }\n        \n        .usage-card {\n            background: white;\n            border: 1px solid #e5e7eb;\n            border-radius: 8px;\n            padding: 1.5rem;\n            text-align: center;\n        }\n        \n        .usage-number {\n            font-size: 2rem;\n            font-weight: 700;\n            color: #3b82f6;\n            margin-bottom: 0.5rem;\n        }\n        \n        .usage-label {\n            color: #6b7280;\n            font-size: 0.9rem;\n        }\n        \n        .loading {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 2rem;\n            color: #6b7280;\n        }\n        \n        .spinner {\n            border: 3px solid #f3f3f3;\n            border-top: 3px solid #3b82f6;\n            border-radius: 50%;\n            width: 2rem;\n            height: 2rem;\n            animation: spin 1s linear infinite;\n            margin-right: 1rem;\n        }\n        \n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n        \n        @media (max-width: 768px) {\n            .main-layout {\n                flex-direction: column;\n            }\n            \n            .sidebar {\n                width: 100%;\n                padding: 1rem 0;\n            }\n            \n            .sidebar-nav {\n                display: flex;\n                gap: 1rem;\n                overflow-x: auto;\n                padding: 0 1rem;\n            }\n            \n            .sidebar-nav li {\n                margin-bottom: 0;\n                flex-shrink: 0;\n            }\n            \n            .sidebar-nav a {\n                padding: 0.75rem 1rem;\n                border-right: none;\n                border-bottom: 3px solid transparent;\n                border-radius: 6px;\n                white-space: nowrap;\n            }\n            \n            .sidebar-nav a.active {\n                border-right: none;\n                border-bottom-color: #3b82f6;\n            }\n            \n            .main-content {\n                padding: 1rem;\n            }\n            \n            .subscription-details {\n                grid-template-columns: 1fr;\n                gap: 1rem;\n            }\n            \n            .card-actions {\n                flex-direction: column;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header class=\"header\">\n        <nav class=\"nav-container\">\n            <a href=\"/\" class=\"logo\">\n                <div class=\"logo-icon\">Ez</div>\n                EzEdit.co\n            </a>\n            \n            <div class=\"user-menu\">\n                <div class=\"user-info\" id=\"user-info\">Loading...</div>\n                <a href=\"/dashboard-real.html\" class=\"back-btn\">← Dashboard</a>\n                <button class=\"logout-btn\" onclick=\"logout()\">\n                    ↗ Log out\n                </button>\n            </div>\n        </nav>\n    </header>\n    \n    <div class=\"main-layout\">\n        <aside class=\"sidebar\">\n            <h2 class=\"sidebar-title\">Account</h2>\n            <nav>\n                <ul class=\"sidebar-nav\">\n                    <li><a href=\"#\" class=\"active\"><span class=\"icon\">💳</span> Billing</a></li>\n                    <li><a href=\"/dashboard-real.html\"><span class=\"icon\">🌐</span> My Sites</a></li>\n                    <li><a href=\"#\"><span class=\"icon\">⚙️</span> Settings</a></li>\n                </ul>\n            </nav>\n        </aside>\n        \n        <main class=\"main-content\">\n            <div class=\"page-header\">\n                <h1 class=\"page-title\">Billing & Subscription</h1>\n                <p class=\"page-description\">Manage your subscription, billing, and usage</p>\n            </div>\n            \n            <div class=\"loading\" id=\"loading\">\n                <div class=\"spinner\"></div>\n                Loading subscription details...\n            </div>\n            \n            <div id=\"billing-content\" style=\"display: none;\">\n                <!-- Trial Warning (if applicable) -->\n                <div class=\"trial-warning\" id=\"trial-warning\" style=\"display: none;\">\n                    <div class=\"warning-icon\">⚠️</div>\n                    <div class=\"warning-content\">\n                        <h3>Free Trial Ending Soon</h3>\n                        <p id=\"trial-message\">Your free trial ends in 3 days. Upgrade now to continue saving files and using AI features.</p>\n                        <button class=\"btn btn-primary\" onclick=\"upgradeToPro()\">Upgrade Now</button>\n                    </div>\n                </div>\n                \n                <!-- Current Subscription Card -->\n                <div class=\"billing-cards\">\n                    <div class=\"billing-card\" id=\"subscription-card\">\n                        <div class=\"card-header\">\n                            <h2 class=\"card-title\">Current Subscription</h2>\n                            <div class=\"status-badge\" id=\"subscription-status\">Active</div>\n                        </div>\n                        \n                        <div class=\"subscription-details\" id=\"subscription-details\">\n                            <div class=\"detail-item\">\n                                <div class=\"detail-label\">Plan</div>\n                                <div class=\"detail-value\" id=\"current-plan\">Pro Monthly</div>\n                            </div>\n                            <div class=\"detail-item\">\n                                <div class=\"detail-label\">Price</div>\n                                <div class=\"detail-value\" id=\"current-price\">$50/month</div>\n                            </div>\n                            <div class=\"detail-item\">\n                                <div class=\"detail-label\">Next Billing</div>\n                                <div class=\"detail-value\" id=\"next-billing\">Dec 22, 2024</div>\n                            </div>\n                            <div class=\"detail-item\">\n                                <div class=\"detail-label\">Status</div>\n                                <div class=\"detail-value\" id=\"billing-status\">Current</div>\n                            </div>\n                        </div>\n                        \n                        <div class=\"card-actions\" id=\"subscription-actions\">\n                            <button class=\"btn btn-primary\" onclick=\"openCustomerPortal()\">Manage Subscription</button>\n                            <button class=\"btn btn-outline\" onclick=\"changePlan()\">Change Plan</button>\n                        </div>\n                    </div>\n                    \n                    <!-- Upgrade Card (for trial users) -->\n                    <div class=\"billing-card upgrade-card\" id=\"upgrade-card\" style=\"display: none;\">\n                        <div class=\"card-header\">\n                            <h2 class=\"card-title\">Upgrade to Pro</h2>\n                        </div>\n                        \n                        <div class=\"subscription-details\">\n                            <div class=\"detail-item\">\n                                <div class=\"detail-label\">Features</div>\n                                <div class=\"detail-value\">Unlimited sites & saves</div>\n                            </div>\n                            <div class=\"detail-item\">\n                                <div class=\"detail-label\">AI Assistance</div>\n                                <div class=\"detail-value\">Unlimited queries</div>\n                            </div>\n                            <div class=\"detail-item\">\n                                <div class=\"detail-label\">Team Collaboration</div>\n                                <div class=\"detail-value\">5 team members</div>\n                            </div>\n                            <div class=\"detail-item\">\n                                <div class=\"detail-label\">Support</div>\n                                <div class=\"detail-value\">Priority support</div>\n                            </div>\n                        </div>\n                        \n                        <div class=\"card-actions\">\n                            <button class=\"btn btn-outline\" onclick=\"upgradeToPro()\">Upgrade to Pro - $50/month</button>\n                            <button class=\"btn btn-outline\" onclick=\"buyLifetime()\">Buy Lifetime - $497</button>\n                        </div>\n                    </div>\n                </div>\n                \n                <!-- Usage Statistics -->\n                <div class=\"usage-section\">\n                    <h2>Usage This Month</h2>\n                    <div class=\"usage-grid\">\n                        <div class=\"usage-card\">\n                            <div class=\"usage-number\" id=\"sites-count\">-</div>\n                            <div class=\"usage-label\">Connected Sites</div>\n                        </div>\n                        <div class=\"usage-card\">\n                            <div class=\"usage-number\" id=\"files-edited\">-</div>\n                            <div class=\"usage-label\">Files Edited</div>\n                        </div>\n                        <div class=\"usage-card\">\n                            <div class=\"usage-number\" id=\"ai-queries\">-</div>\n                            <div class=\"usage-label\">AI Queries</div>\n                        </div>\n                        <div class=\"usage-card\">\n                            <div class=\"usage-number\" id=\"storage-used\">-</div>\n                            <div class=\"usage-label\">Storage Used</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </main>\n    </div>\n    \n    <script>\n        // Initialize Stripe and Supabase\n        const stripe = Stripe('pk_live_51R9RpGAuYycpID5hykEKz1PLYpMC5f2xVcejaqipi31fCuAH4Yuwkxaz8oaTW1gxaZKFueKPfxBnj8zmsdhWICM7006c7mCTz2');\n        const supabaseUrl = 'https://sctsykgcfkhadowygcrj.supabase.co';\n        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNjdHN5a2djZmtoYWRvd3lnY3JqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTE1OTE5MDUsImV4cCI6MjA2NzE2NzkwNX0.8cpoEx0MXO0kkTqDrpkbYRhXQHVQ0bmjHA0xI2rUWqY';\n        const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);\n        \n        let currentUser = null;\n        let subscriptionData = null;\n        \n        // Check authentication on load\n        async function checkAuth() {\n            const { data: { session } } = await supabase.auth.getSession();\n            if (!session?.user) {\n                window.location.href = '/login-real.html';\n                return false;\n            }\n            currentUser = session.user;\n            document.getElementById('user-info').textContent = session.user.email;\n            return true;\n        }\n        \n        // Load subscription data\n        async function loadSubscriptionData() {\n            try {\n                const { data: profile, error } = await supabase\n                    .from('user_profiles')\n                    .select('*')\n                    .eq('id', currentUser.id)\n                    .single();\n                \n                if (error) {\n                    console.error('Error loading subscription:', error);\n                    return;\n                }\n                \n                subscriptionData = profile;\n                renderSubscriptionInfo();\n                loadUsageStats();\n                \n            } catch (err) {\n                console.error('Subscription loading error:', err);\n            } finally {\n                document.getElementById('loading').style.display = 'none';\n                document.getElementById('billing-content').style.display = 'block';\n            }\n        }\n        \n        // Render subscription information\n        function renderSubscriptionInfo() {\n            if (!subscriptionData) return;\n            \n            const status = subscriptionData.subscription_status || 'trial';\n            const plan = subscriptionData.subscription_plan || 'trial';\n            const billing = subscriptionData.subscription_billing || 'monthly';\n            \n            // Update status badge\n            const statusBadge = document.getElementById('subscription-status');\n            statusBadge.textContent = status.charAt(0).toUpperCase() + status.slice(1);\n            statusBadge.className = `status-badge status-${status}`;\n            \n            // Update subscription details\n            if (status === 'trial') {\n                showTrialInterface();\n            } else if (status === 'active' || status === 'past_due') {\n                showActiveSubscription();\n            } else if (status === 'lifetime') {\n                showLifetimeSubscription();\n            } else {\n                showCanceledSubscription();\n            }\n            \n            // Show trial warning if applicable\n            if (status === 'trial' && subscriptionData.trial_ends_at) {\n                showTrialWarning();\n            }\n        }\n        \n        // Show trial interface\n        function showTrialInterface() {\n            document.getElementById('current-plan').textContent = 'Free Trial';\n            document.getElementById('current-price').textContent = '$0';\n            document.getElementById('next-billing').textContent = subscriptionData.trial_ends_at ? \n                formatDate(subscriptionData.trial_ends_at) : 'N/A';\n            document.getElementById('billing-status').textContent = 'Trial Active';\n            \n            // Show upgrade card\n            document.getElementById('upgrade-card').style.display = 'block';\n            \n            // Update actions\n            document.getElementById('subscription-actions').innerHTML = `\n                <button class=\"btn btn-primary\" onclick=\"upgradeToPro()\">Upgrade to Pro</button>\n                <button class=\"btn btn-outline\" onclick=\"buyLifetime()\">Buy Lifetime</button>\n            `;\n        }\n        \n        // Show active subscription\n        function showActiveSubscription() {\n            const planName = subscriptionData.subscription_plan === 'pro' ? 'Pro' : 'Premium';\n            const billingText = subscriptionData.subscription_billing === 'yearly' ? 'Yearly' : 'Monthly';\n            const price = subscriptionData.subscription_billing === 'yearly' ? '$40/month (billed yearly)' : '$50/month';\n            \n            document.getElementById('current-plan').textContent = `${planName} ${billingText}`;\n            document.getElementById('current-price').textContent = price;\n            document.getElementById('next-billing').textContent = subscriptionData.current_period_end ? \n                formatDate(subscriptionData.current_period_end) : 'N/A';\n            document.getElementById('billing-status').textContent = subscriptionData.subscription_status === 'past_due' ? 'Payment Due' : 'Current';\n            \n            // Standard actions\n            document.getElementById('subscription-actions').innerHTML = `\n                <button class=\"btn btn-primary\" onclick=\"openCustomerPortal()\">Manage Subscription</button>\n                <button class=\"btn btn-outline\" onclick=\"changePlan()\">Change Plan</button>\n                <button class=\"btn btn-danger\" onclick=\"cancelSubscription()\">Cancel</button>\n            `;\n        }\n        \n        // Show lifetime subscription\n        function showLifetimeSubscription() {\n            document.getElementById('current-plan').textContent = 'Lifetime';\n            document.getElementById('current-price').textContent = '$497 (one-time)';\n            document.getElementById('next-billing').textContent = 'Never';\n            document.getElementById('billing-status').textContent = 'Lifetime Access';\n            \n            document.getElementById('subscription-actions').innerHTML = `\n                <button class=\"btn btn-outline\" onclick=\"openCustomerPortal()\">View Receipt</button>\n            `;\n        }\n        \n        // Show canceled subscription\n        function showCanceledSubscription() {\n            document.getElementById('current-plan').textContent = 'Canceled';\n            document.getElementById('current-price').textContent = '$0';\n            document.getElementById('next-billing').textContent = 'N/A';\n            document.getElementById('billing-status').textContent = 'Canceled';\n            \n            document.getElementById('subscription-actions').innerHTML = `\n                <button class=\"btn btn-primary\" onclick=\"upgradeToPro()\">Resubscribe</button>\n            `;\n        }\n        \n        // Show trial warning\n        function showTrialWarning() {\n            const trialEndDate = new Date(subscriptionData.trial_ends_at);\n            const now = new Date();\n            const daysLeft = Math.ceil((trialEndDate - now) / (1000 * 60 * 60 * 24));\n            \n            if (daysLeft > 0) {\n                document.getElementById('trial-message').textContent = \n                    `Your free trial ends in ${daysLeft} day${daysLeft === 1 ? '' : 's'}. Upgrade now to continue saving files and using AI features.`;\n                document.getElementById('trial-warning').style.display = 'flex';\n            }\n        }\n        \n        // Load usage statistics\n        async function loadUsageStats() {\n            try {\n                // Load site count\n                const { data: sites, error: sitesError } = await supabase\n                    .from('ftp_sites')\n                    .select('id')\n                    .eq('user_id', currentUser.id);\n                \n                if (!sitesError) {\n                    document.getElementById('sites-count').textContent = sites.length;\n                }\n                \n                // For now, show placeholder data for other metrics\n                // In production, these would come from usage tracking tables\n                document.getElementById('files-edited').textContent = '24';\n                document.getElementById('ai-queries').textContent = '156';\n                document.getElementById('storage-used').textContent = '2.1MB';\n                \n            } catch (error) {\n                console.error('Usage stats error:', error);\n            }\n        }\n        \n        // Upgrade to Pro\n        async function upgradeToPro() {\n            try {\n                const { data: { session } } = await supabase.auth.getSession();\n                \n                const response = await fetch('/api/stripe/create-checkout-session', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${session.access_token}`\n                    },\n                    body: JSON.stringify({\n                        priceId: 'price_1QXbhKAuYycpID5hJUv8QE1H',\n                        userId: currentUser.id,\n                        userEmail: currentUser.email,\n                        plan: 'pro',\n                        billing: 'monthly'\n                    })\n                });\n                \n                const { sessionId, error } = await response.json();\n                \n                if (error) throw new Error(error);\n                \n                const { error: stripeError } = await stripe.redirectToCheckout({\n                    sessionId: sessionId\n                });\n                \n                if (stripeError) throw new Error(stripeError.message);\n                \n            } catch (error) {\n                alert('Error starting checkout: ' + error.message);\n            }\n        }\n        \n        // Buy lifetime\n        async function buyLifetime() {\n            try {\n                const { data: { session } } = await supabase.auth.getSession();\n                \n                const response = await fetch('/api/stripe/create-checkout-session', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${session.access_token}`\n                    },\n                    body: JSON.stringify({\n                        priceId: 'price_1QXbhKAuYycpID5hJUv8QE1H_lifetime',\n                        userId: currentUser.id,\n                        userEmail: currentUser.email,\n                        plan: 'lifetime',\n                        billing: 'one-time'\n                    })\n                });\n                \n                const { sessionId, error } = await response.json();\n                \n                if (error) throw new Error(error);\n                \n                const { error: stripeError } = await stripe.redirectToCheckout({\n                    sessionId: sessionId\n                });\n                \n                if (stripeError) throw new Error(stripeError.message);\n                \n            } catch (error) {\n                alert('Error starting checkout: ' + error.message);\n            }\n        }\n        \n        // Open Stripe Customer Portal\n        async function openCustomerPortal() {\n            try {\n                const { data: { session } } = await supabase.auth.getSession();\n                \n                const response = await fetch('/api/stripe/create-portal-session', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': `Bearer ${session.access_token}`\n                    },\n                    body: JSON.stringify({\n                        userId: currentUser.id\n                    })\n                });\n                \n                const { url, error } = await response.json();\n                \n                if (error) throw new Error(error);\n                \n                window.location.href = url;\n                \n            } catch (error) {\n                alert('Error opening billing portal: ' + error.message);\n            }\n        }\n        \n        // Change plan\n        function changePlan() {\n            window.location.href = '/pricing.html';\n        }\n        \n        // Cancel subscription\n        function cancelSubscription() {\n            if (confirm('Are you sure you want to cancel your subscription? You will lose access to Pro features at the end of your billing period.')) {\n                openCustomerPortal();\n            }\n        }\n        \n        // Format date\n        function formatDate(dateString) {\n            return new Date(dateString).toLocaleDateString('en-US', {\n                year: 'numeric',\n                month: 'short',\n                day: 'numeric'\n            });\n        }\n        \n        // Logout\n        async function logout() {\n            await supabase.auth.signOut();\n            localStorage.clear();\n            sessionStorage.clear();\n            window.location.href = '/';\n        }\n        \n        // Initialize\n        async function init() {\n            if (await checkAuth()) {\n                await loadSubscriptionData();\n            }\n        }\n        \n        // Listen for auth changes\n        supabase.auth.onAuthStateChange((event, session) => {\n            if (event === 'SIGNED_OUT' || !session) {\n                window.location.href = '/login-real.html';\n            }\n        });\n        \n        // Start the app\n        init();\n    </script>\n</body>\n</html>",
      "size": "32.0KB",
      "targetPath": "/var/www/html/billing.html",
      "hash": "113c99206ae1b221d9ec7e75255bbc3d"
    },
    "api/ai-routes.js": {
      "content": "/**\n * AI Assistant Routes with Claude + Qwen 1.5 Fallback\n * Primary: Claude 3.5 Sonnet | Fallback: Qwen 1.5 (via Ollama/HuggingFace)\n */\n\nconst express = require('express');\nconst { createClient } = require('@supabase/supabase-js');\nconst axios = require('axios');\n\nconst router = express.Router();\n\n// Initialize Supabase client\nconst supabase = createClient(\n    process.env.SUPABASE_URL,\n    process.env.SUPABASE_SERVICE_KEY\n);\n\n// AI Configuration\nconst AI_CONFIG = {\n    claude: {\n        apiKey: process.env.CLAUDE_API_KEY,\n        model: 'claude-3-5-sonnet-20241022',\n        baseURL: 'https://api.anthropic.com/v1/messages',\n        maxTokens: 4096,\n        temperature: 0.7\n    },\n    qwen: {\n        // Option 1: Ollama local installation\n        baseURL: process.env.QWEN_API_URL || 'http://localhost:11434/api/generate',\n        model: 'qwen:1.5b-chat',\n        // Option 2: HuggingFace Inference API\n        hfApiKey: process.env.HUGGINGFACE_API_KEY,\n        hfBaseURL: 'https://api-inference.huggingface.co/models/Qwen/Qwen1.5-7B-Chat',\n        maxTokens: 2048,\n        temperature: 0.7\n    }\n};\n\n/**\n * Chat endpoint with Claude primary, Qwen fallback\n */\nrouter.post('/chat', async (req, res) => {\n    try {\n        const { message, context, userId } = req.body;\n        \n        if (!message || !userId) {\n            return res.status(400).json({\n                success: false,\n                error: 'Message and userId are required'\n            });\n        }\n\n        // Check user's subscription status for usage limits\n        const { data: userProfile } = await supabase\n            .from('user_profiles')\n            .select('subscription_status, ai_queries_today')\n            .eq('id', userId)\n            .single();\n\n        // Usage limits: Trial = 10/day, Pro = unlimited\n        const dailyLimit = userProfile?.subscription_status === 'trial' ? 10 : 999999;\n        const queriesUsed = userProfile?.ai_queries_today || 0;\n\n        if (queriesUsed >= dailyLimit) {\n            return res.status(429).json({\n                success: false,\n                error: 'Daily AI query limit reached. Upgrade to Pro for unlimited queries.',\n                upgradeUrl: '/pricing.html'\n            });\n        }\n\n        let aiResponse;\n        let modelUsed = 'claude';\n        let error = null;\n\n        // Try Claude first\n        try {\n            aiResponse = await callClaude(message, context);\n        } catch (claudeError) {\n            console.log('Claude API failed, trying Qwen fallback:', claudeError.message);\n            \n            try {\n                aiResponse = await callQwen(message, context);\n                modelUsed = 'qwen';\n            } catch (qwenError) {\n                console.error('Both AI models failed:', { claudeError, qwenError });\n                error = 'AI services temporarily unavailable. Please try again later.';\n            }\n        }\n\n        if (error) {\n            return res.status(503).json({\n                success: false,\n                error: error\n            });\n        }\n\n        // Update usage tracking\n        await supabase\n            .from('user_profiles')\n            .update({\n                ai_queries_today: queriesUsed + 1,\n                last_ai_query: new Date().toISOString()\n            })\n            .eq('id', userId);\n\n        // Log AI usage for monitoring\n        await supabase\n            .from('ai_usage_logs')\n            .insert({\n                user_id: userId,\n                model_used: modelUsed,\n                message_length: message.length,\n                response_length: aiResponse?.length || 0,\n                context_provided: !!context,\n                timestamp: new Date().toISOString()\n            });\n\n        res.json({\n            success: true,\n            response: aiResponse,\n            model: modelUsed,\n            queriesRemaining: Math.max(0, dailyLimit - queriesUsed - 1)\n        });\n\n    } catch (error) {\n        console.error('AI chat error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Internal server error'\n        });\n    }\n});\n\n/**\n * Call Claude 3.5 Sonnet API\n */\nasync function callClaude(message, context = null) {\n    const systemPrompt = buildSystemPrompt(context);\n    \n    const response = await axios.post(AI_CONFIG.claude.baseURL, {\n        model: AI_CONFIG.claude.model,\n        max_tokens: AI_CONFIG.claude.maxTokens,\n        temperature: AI_CONFIG.claude.temperature,\n        system: systemPrompt,\n        messages: [{\n            role: 'user',\n            content: message\n        }]\n    }, {\n        headers: {\n            'Content-Type': 'application/json',\n            'x-api-key': AI_CONFIG.claude.apiKey,\n            'anthropic-version': '2023-06-01'\n        },\n        timeout: 30000\n    });\n\n    if (!response.data?.content?.[0]?.text) {\n        throw new Error('Invalid Claude API response format');\n    }\n\n    return response.data.content[0].text;\n}\n\n/**\n * Call Qwen 1.5 (with multiple backend options)\n */\nasync function callQwen(message, context = null) {\n    const systemPrompt = buildSystemPrompt(context);\n    const fullPrompt = `${systemPrompt}\\n\\nUser: ${message}\\n\\nAssistant:`;\n\n    // Try Ollama first (if available locally)\n    try {\n        const response = await axios.post(AI_CONFIG.qwen.baseURL, {\n            model: AI_CONFIG.qwen.model,\n            prompt: fullPrompt,\n            stream: false,\n            options: {\n                temperature: AI_CONFIG.qwen.temperature,\n                top_p: 0.9,\n                max_tokens: AI_CONFIG.qwen.maxTokens\n            }\n        }, {\n            timeout: 30000\n        });\n\n        if (response.data?.response) {\n            return response.data.response.trim();\n        }\n    } catch (ollamaError) {\n        console.log('Ollama failed, trying HuggingFace:', ollamaError.message);\n    }\n\n    // Fallback to HuggingFace Inference API\n    if (AI_CONFIG.qwen.hfApiKey) {\n        const response = await axios.post(AI_CONFIG.qwen.hfBaseURL, {\n            inputs: fullPrompt,\n            parameters: {\n                max_new_tokens: AI_CONFIG.qwen.maxTokens,\n                temperature: AI_CONFIG.qwen.temperature,\n                top_p: 0.9,\n                do_sample: true,\n                return_full_text: false\n            }\n        }, {\n            headers: {\n                'Authorization': `Bearer ${AI_CONFIG.qwen.hfApiKey}`,\n                'Content-Type': 'application/json'\n            },\n            timeout: 45000\n        });\n\n        if (response.data?.[0]?.generated_text) {\n            return response.data[0].generated_text.trim();\n        }\n    }\n\n    throw new Error('All Qwen backends failed');\n}\n\n/**\n * Build system prompt based on context\n */\nfunction buildSystemPrompt(context) {\n    let systemPrompt = `You are Klein, an AI coding assistant for EzEdit.co, a web-based FTP code editor. You help developers understand code, fix bugs, write features, and optimize performance.\n\nKey capabilities:\n- Explain code and functions clearly\n- Identify and fix bugs\n- Suggest improvements and optimizations\n- Write new code features\n- Answer development questions\n- Provide best practices and security advice\n\nStyle: Be concise, helpful, and focus on practical solutions. Use code examples when helpful.`;\n\n    if (context) {\n        if (context.currentFile) {\n            systemPrompt += `\\n\\nCurrent context:\n- User is editing: ${context.currentFile}\n- File language: ${context.language || 'unknown'}`;\n        }\n\n        if (context.fileContent) {\n            systemPrompt += `\\n- Current file content:\\n\\`\\`\\`${context.language || 'text'}\\n${context.fileContent.slice(0, 2000)}${context.fileContent.length > 2000 ? '...' : ''}\\n\\`\\`\\``;\n        }\n    }\n\n    return systemPrompt;\n}\n\n/**\n * Get AI usage statistics\n */\nrouter.get('/usage/:userId', async (req, res) => {\n    try {\n        const { userId } = req.params;\n\n        const { data: userProfile } = await supabase\n            .from('user_profiles')\n            .select('subscription_status, ai_queries_today')\n            .eq('id', userId)\n            .single();\n\n        const dailyLimit = userProfile?.subscription_status === 'trial' ? 10 : 999999;\n        const queriesUsed = userProfile?.ai_queries_today || 0;\n\n        res.json({\n            success: true,\n            usage: {\n                queriesUsed: queriesUsed,\n                dailyLimit: dailyLimit,\n                queriesRemaining: Math.max(0, dailyLimit - queriesUsed),\n                subscriptionStatus: userProfile?.subscription_status || 'trial'\n            }\n        });\n\n    } catch (error) {\n        console.error('Usage stats error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to get usage statistics'\n        });\n    }\n});\n\n/**\n * Health check for AI services\n */\nrouter.get('/health', async (req, res) => {\n    const health = {\n        claude: false,\n        qwen: false,\n        timestamp: new Date().toISOString()\n    };\n\n    // Test Claude\n    try {\n        await axios.post(AI_CONFIG.claude.baseURL, {\n            model: AI_CONFIG.claude.model,\n            max_tokens: 10,\n            messages: [{ role: 'user', content: 'Hi' }]\n        }, {\n            headers: {\n                'Content-Type': 'application/json',\n                'x-api-key': AI_CONFIG.claude.apiKey,\n                'anthropic-version': '2023-06-01'\n            },\n            timeout: 10000\n        });\n        health.claude = true;\n    } catch (error) {\n        console.log('Claude health check failed:', error.message);\n    }\n\n    // Test Qwen (Ollama)\n    try {\n        await axios.post(AI_CONFIG.qwen.baseURL, {\n            model: AI_CONFIG.qwen.model,\n            prompt: 'Hi',\n            stream: false\n        }, {\n            timeout: 10000\n        });\n        health.qwen = true;\n    } catch (error) {\n        console.log('Qwen health check failed:', error.message);\n    }\n\n    res.json({\n        success: true,\n        services: health,\n        status: health.claude || health.qwen ? 'operational' : 'degraded'\n    });\n});\n\nmodule.exports = router;",
      "size": "9.9KB",
      "targetPath": "/var/www/html/api/ai-routes.js",
      "hash": "5142bc398005094c599c91546d7e957a"
    },
    "api/ftp-routes.js": {
      "content": "/**\n * Real FTP API Routes\n * Replaces demo functionality with actual FTP operations\n */\n\nconst express = require('express');\nconst router = express.Router();\nconst ftpPool = require('../services/ftp-connection-pool');\nconst auth = require('../config/auth');\n\n/**\n * Authentication middleware for FTP routes\n */\nconst requireAuth = async (req, res, next) => {\n    try {\n        const token = req.headers.authorization?.replace('Bearer ', '');\n        if (!token) {\n            return res.status(401).json({\n                success: false,\n                error: 'Authentication required'\n            });\n        }\n\n        const auth = require('../config/auth');\n        const authManager = auth.getAuth();\n        \n        const userData = authManager.verifyJWT(token);\n        if (!userData) {\n            return res.status(401).json({\n                success: false,\n                error: 'Invalid authentication token'\n            });\n        }\n        \n        req.user = userData;\n        \n        next();\n    } catch (error) {\n        res.status(401).json({\n            success: false,\n            error: 'Invalid authentication token'\n        });\n    }\n};\n\n/**\n * Connect to FTP server\n * POST /api/ftp/connect\n */\nrouter.post('/connect', requireAuth, async (req, res) => {\n    try {\n        const { host, username, password, port = 21, secure = false } = req.body;\n        \n        // Validate required fields\n        if (!host || !username || !password) {\n            return res.status(400).json({\n                success: false,\n                error: 'Host, username, and password are required'\n            });\n        }\n        \n        const config = {\n            host,\n            username,\n            password,\n            port: parseInt(port),\n            secure: Boolean(secure),\n            timeout: 30000\n        };\n        \n        // Create FTP connection\n        const connectionId = await ftpPool.createConnection(req.user.user_id || req.user.id, config);\n        \n        res.json({\n            success: true,\n            data: {\n                connectionId,\n                message: 'Successfully connected to FTP server'\n            }\n        });\n        \n    } catch (error) {\n        console.error('FTP connect error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to connect to FTP server'\n        });\n    }\n});\n\n/**\n * List directory contents\n * POST /api/ftp/list\n */\nrouter.post('/list', requireAuth, async (req, res) => {\n    try {\n        const { connectionId, path = '/' } = req.body;\n        \n        if (!connectionId) {\n            return res.status(400).json({\n                success: false,\n                error: 'Connection ID is required'\n            });\n        }\n        \n        // Get FTP connection\n        const connection = await ftpPool.getConnection(connectionId, req.user.user_id || req.user.id);\n        const ftpClient = connection.client;\n        \n        // List directory contents\n        const files = await ftpClient.list(path);\n        \n        // Format file list\n        const formattedFiles = files.map(file => ({\n            name: file.name,\n            type: file.type === 1 ? 'file' : 'directory',\n            size: file.size,\n            modifiedAt: file.modifiedAt,\n            permissions: file.permissions\n        }));\n        \n        res.json({\n            success: true,\n            data: {\n                path,\n                files: formattedFiles\n            }\n        });\n        \n    } catch (error) {\n        console.error('FTP list error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to list directory contents'\n        });\n    }\n});\n\n/**\n * Download/read file content\n * POST /api/ftp/get\n */\nrouter.post('/get', requireAuth, async (req, res) => {\n    try {\n        const { connectionId, path } = req.body;\n        \n        if (!connectionId || !path) {\n            return res.status(400).json({\n                success: false,\n                error: 'Connection ID and file path are required'\n            });\n        }\n        \n        // Get FTP connection\n        const connection = await ftpPool.getConnection(connectionId, req.user.user_id || req.user.id);\n        const ftpClient = connection.client;\n        \n        // Download file content\n        const readable = await ftpClient.downloadTo(null, path);\n        let content = '';\n        \n        // Read stream content\n        for await (const chunk of readable) {\n            content += chunk.toString();\n        }\n        \n        res.json({\n            success: true,\n            data: {\n                path,\n                content,\n                size: Buffer.byteLength(content, 'utf8')\n            }\n        });\n        \n    } catch (error) {\n        console.error('FTP get error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to download file'\n        });\n    }\n});\n\n/**\n * Save/upload file content\n * POST /api/ftp/save\n */\nrouter.post('/save', requireAuth, async (req, res) => {\n    try {\n        const { connectionId, path, content } = req.body;\n        \n        if (!connectionId || !path || content === undefined) {\n            return res.status(400).json({\n                success: false,\n                error: 'Connection ID, file path, and content are required'\n            });\n        }\n        \n        // Get FTP connection\n        const connection = await ftpPool.getConnection(connectionId, req.user.user_id || req.user.id);\n        const ftpClient = connection.client;\n        \n        // Upload file content\n        const buffer = Buffer.from(content, 'utf8');\n        await ftpClient.uploadFrom(buffer, path);\n        \n        res.json({\n            success: true,\n            data: {\n                path,\n                size: buffer.length,\n                message: 'File saved successfully'\n            }\n        });\n        \n    } catch (error) {\n        console.error('FTP save error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to save file'\n        });\n    }\n});\n\n/**\n * Create directory\n * POST /api/ftp/mkdir\n */\nrouter.post('/mkdir', requireAuth, async (req, res) => {\n    try {\n        const { connectionId, path } = req.body;\n        \n        if (!connectionId || !path) {\n            return res.status(400).json({\n                success: false,\n                error: 'Connection ID and directory path are required'\n            });\n        }\n        \n        // Get FTP connection\n        const connection = await ftpPool.getConnection(connectionId, req.user.user_id || req.user.id);\n        const ftpClient = connection.client;\n        \n        // Create directory\n        await ftpClient.ensureDir(path);\n        \n        res.json({\n            success: true,\n            data: {\n                path,\n                message: 'Directory created successfully'\n            }\n        });\n        \n    } catch (error) {\n        console.error('FTP mkdir error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to create directory'\n        });\n    }\n});\n\n/**\n * Delete file or directory\n * POST /api/ftp/delete\n */\nrouter.post('/delete', requireAuth, async (req, res) => {\n    try {\n        const { connectionId, path, type = 'file' } = req.body;\n        \n        if (!connectionId || !path) {\n            return res.status(400).json({\n                success: false,\n                error: 'Connection ID and path are required'\n            });\n        }\n        \n        // Get FTP connection\n        const connection = await ftpPool.getConnection(connectionId, req.user.user_id || req.user.id);\n        const ftpClient = connection.client;\n        \n        // Delete file or directory\n        if (type === 'directory') {\n            await ftpClient.removeDir(path);\n        } else {\n            await ftpClient.remove(path);\n        }\n        \n        res.json({\n            success: true,\n            data: {\n                path,\n                type,\n                message: `${type === 'directory' ? 'Directory' : 'File'} deleted successfully`\n            }\n        });\n        \n    } catch (error) {\n        console.error('FTP delete error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to delete item'\n        });\n    }\n});\n\n/**\n * Rename file or directory\n * POST /api/ftp/rename\n */\nrouter.post('/rename', requireAuth, async (req, res) => {\n    try {\n        const { connectionId, oldPath, newPath } = req.body;\n        \n        if (!connectionId || !oldPath || !newPath) {\n            return res.status(400).json({\n                success: false,\n                error: 'Connection ID, old path, and new path are required'\n            });\n        }\n        \n        // Get FTP connection\n        const connection = await ftpPool.getConnection(connectionId, req.user.user_id || req.user.id);\n        const ftpClient = connection.client;\n        \n        // Rename file or directory\n        await ftpClient.rename(oldPath, newPath);\n        \n        res.json({\n            success: true,\n            data: {\n                oldPath,\n                newPath,\n                message: 'Item renamed successfully'\n            }\n        });\n        \n    } catch (error) {\n        console.error('FTP rename error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to rename item'\n        });\n    }\n});\n\n/**\n * Disconnect from FTP server\n * POST /api/ftp/disconnect\n */\nrouter.post('/disconnect', requireAuth, async (req, res) => {\n    try {\n        const { connectionId } = req.body;\n        \n        if (!connectionId) {\n            return res.status(400).json({\n                success: false,\n                error: 'Connection ID is required'\n            });\n        }\n        \n        // Close FTP connection\n        await ftpPool.closeConnection(connectionId, req.user.user_id || req.user.id);\n        \n        res.json({\n            success: true,\n            data: {\n                message: 'Successfully disconnected from FTP server'\n            }\n        });\n        \n    } catch (error) {\n        console.error('FTP disconnect error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to disconnect from FTP server'\n        });\n    }\n});\n\n/**\n * Get connection status and statistics\n * GET /api/ftp/status\n */\nrouter.get('/status', requireAuth, async (req, res) => {\n    try {\n        const connections = await ftpPool.getUserConnections(req.user.user_id || req.user.id);\n        const stats = ftpPool.getStats();\n        \n        res.json({\n            success: true,\n            data: {\n                connections,\n                stats\n            }\n        });\n        \n    } catch (error) {\n        console.error('FTP status error:', error);\n        res.status(500).json({\n            success: false,\n            error: error.message || 'Failed to get connection status'\n        });\n    }\n});\n\n/**\n * Test FTP connection\n * POST /api/ftp/test-connection\n */\nrouter.post('/test-connection', requireAuth, async (req, res) => {\n    try {\n        const { host, port = 21, username, password, passive_mode = true } = req.body;\n        \n        if (!host || !username || !password) {\n            return res.status(400).json({\n                success: false,\n                error: 'Host, username, and password are required'\n            });\n        }\n\n        // Import FTP library for testing\n        const Client = require('basic-ftp');\n        const client = new Client();\n        \n        try {\n            // Set timeout for connection test\n            client.ftp.timeout = 10000; // 10 seconds\n            \n            // Attempt to connect\n            await client.access({\n                host,\n                port: parseInt(port),\n                user: username,\n                password,\n                secure: false\n            });\n\n            // Test basic operations\n            const currentDir = await client.pwd();\n            \n            res.json({\n                success: true,\n                data: {\n                    message: 'Connection successful',\n                    host,\n                    port: parseInt(port),\n                    currentDirectory: currentDir,\n                    connectionTime: new Date().toISOString()\n                }\n            });\n            \n        } catch (ftpError) {\n            console.error('FTP connection test failed:', ftpError);\n            res.status(400).json({\n                success: false,\n                error: 'Connection failed: ' + ftpError.message\n            });\n        } finally {\n            try {\n                client.close();\n            } catch (closeError) {\n                // Ignore close errors\n            }\n        }\n        \n    } catch (error) {\n        console.error('FTP test error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Internal server error: ' + error.message\n        });\n    }\n});\n\n/**\n * Upload file\n * POST /api/ftp/upload\n */\nrouter.post('/upload', requireAuth, async (req, res) => {\n    try {\n        const multer = require('multer');\n        const upload = multer({ \n            storage: multer.memoryStorage(),\n            limits: { fileSize: 50 * 1024 * 1024 } // 50MB limit\n        });\n\n        // Handle multipart form data\n        upload.single('file')(req, res, async (err) => {\n            if (err) {\n                return res.status(400).json({\n                    success: false,\n                    error: 'File upload error: ' + err.message\n                });\n            }\n\n            const { connectionId, path } = req.body;\n            const file = req.file;\n\n            if (!connectionId || !path || !file) {\n                return res.status(400).json({\n                    success: false,\n                    error: 'Connection ID, path, and file are required'\n                });\n            }\n\n            try {\n                // Get FTP connection\n                const connection = await ftpPool.getConnection(connectionId, req.user.user_id || req.user.id);\n                const ftpClient = connection.client;\n\n                // Upload file buffer\n                await ftpClient.uploadFrom(file.buffer, path);\n\n                res.json({\n                    success: true,\n                    data: {\n                        path,\n                        filename: file.originalname,\n                        size: file.size,\n                        message: 'File uploaded successfully'\n                    }\n                });\n\n            } catch (ftpError) {\n                console.error('FTP upload error:', ftpError);\n                res.status(500).json({\n                    success: false,\n                    error: 'Failed to upload file: ' + ftpError.message\n                });\n            }\n        });\n\n    } catch (error) {\n        console.error('Upload error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Internal server error: ' + error.message\n        });\n    }\n});\n\n/**\n * Download file\n * POST /api/ftp/download\n */\nrouter.post('/download', requireAuth, async (req, res) => {\n    try {\n        const { connectionId, path } = req.body;\n\n        if (!connectionId || !path) {\n            return res.status(400).json({\n                success: false,\n                error: 'Connection ID and path are required'\n            });\n        }\n\n        // Get FTP connection\n        const connection = await ftpPool.getConnection(connectionId, req.user.user_id || req.user.id);\n        const ftpClient = connection.client;\n\n        // Create a stream to capture file data\n        const chunks = [];\n        const writeStream = {\n            write: (chunk) => chunks.push(chunk),\n            end: () => {},\n            on: () => {},\n            once: () => {},\n            emit: () => {}\n        };\n\n        // Download file to memory\n        await ftpClient.downloadTo(writeStream, path);\n\n        // Combine chunks into buffer\n        const fileBuffer = Buffer.concat(chunks);\n\n        // Get filename from path\n        const filename = path.split('/').pop();\n\n        // Set appropriate headers\n        res.setHeader('Content-Type', 'application/octet-stream');\n        res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n        res.setHeader('Content-Length', fileBuffer.length);\n\n        // Send file buffer\n        res.send(fileBuffer);\n\n    } catch (error) {\n        console.error('Download error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Failed to download file: ' + error.message\n        });\n    }\n});\n\nmodule.exports = router;",
      "size": "16.6KB",
      "targetPath": "/var/www/html/api/ftp-routes.js",
      "hash": "5b89dbcafa3f52e257ffbe87fa0b45cc"
    },
    "api/sites-routes.js": {
      "content": "/**\n * Sites API Routes\n * Handles CRUD operations for user sites\n */\n\nconst express = require('express');\nconst { createClient } = require('@supabase/supabase-js');\nconst { verifyJWT } = require('../auth/middleware');\n\nconst router = express.Router();\n\n// Initialize Supabase client\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n// Apply JWT authentication middleware to all routes\nrouter.use(verifyJWT);\n\n/**\n * GET /api/sites - Get all sites for the authenticated user\n */\nrouter.get('/', async (req, res) => {\n    try {\n        const userId = req.user.id;\n\n        const { data: sites, error } = await supabase\n            .from('sites')\n            .select('id, name, host, port, username, root_path, created_at, updated_at')\n            .eq('user_id', userId)\n            .order('created_at', { ascending: false });\n\n        if (error) {\n            console.error('Error fetching sites:', error);\n            return res.status(500).json({\n                success: false,\n                error: 'Failed to fetch sites'\n            });\n        }\n\n        res.json({\n            success: true,\n            data: {\n                sites: sites || []\n            }\n        });\n    } catch (error) {\n        console.error('Sites fetch error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Internal server error'\n        });\n    }\n});\n\n/**\n * POST /api/sites - Create a new site\n */\nrouter.post('/', async (req, res) => {\n    try {\n        const userId = req.user.id;\n        const { name, host, port = 21, username, password, passive = true, root_path = '/' } = req.body;\n\n        // Validate required fields\n        if (!name || !host || !username || !password) {\n            return res.status(400).json({\n                success: false,\n                error: 'Missing required fields: name, host, username, password'\n            });\n        }\n\n        const { data: site, error } = await supabase\n            .from('sites')\n            .insert([{\n                user_id: userId,\n                name,\n                host,\n                port: parseInt(port),\n                username,\n                password, // Will be encrypted by database trigger\n                passive,\n                root_path\n            }])\n            .select('id, name, host, port, username, root_path, created_at, updated_at')\n            .single();\n\n        if (error) {\n            console.error('Error creating site:', error);\n            return res.status(500).json({\n                success: false,\n                error: 'Failed to create site'\n            });\n        }\n\n        res.status(201).json({\n            success: true,\n            data: {\n                site\n            }\n        });\n    } catch (error) {\n        console.error('Site creation error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Internal server error'\n        });\n    }\n});\n\n/**\n * GET /api/sites/:id - Get a specific site\n */\nrouter.get('/:id', async (req, res) => {\n    try {\n        const userId = req.user.id;\n        const siteId = req.params.id;\n\n        const { data: site, error } = await supabase\n            .from('sites')\n            .select('id, name, host, port, username, root_path, created_at, updated_at')\n            .eq('id', siteId)\n            .eq('user_id', userId)\n            .single();\n\n        if (error) {\n            if (error.code === 'PGRST116') {\n                return res.status(404).json({\n                    success: false,\n                    error: 'Site not found'\n                });\n            }\n            console.error('Error fetching site:', error);\n            return res.status(500).json({\n                success: false,\n                error: 'Failed to fetch site'\n            });\n        }\n\n        res.json({\n            success: true,\n            data: {\n                site\n            }\n        });\n    } catch (error) {\n        console.error('Site fetch error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Internal server error'\n        });\n    }\n});\n\n/**\n * PUT /api/sites/:id - Update a site\n */\nrouter.put('/:id', async (req, res) => {\n    try {\n        const userId = req.user.id;\n        const siteId = req.params.id;\n        const { name, host, port, username, password, passive, root_path } = req.body;\n\n        // Build update object (only include provided fields)\n        const updateData = {};\n        if (name !== undefined) updateData.name = name;\n        if (host !== undefined) updateData.host = host;\n        if (port !== undefined) updateData.port = parseInt(port);\n        if (username !== undefined) updateData.username = username;\n        if (password !== undefined) updateData.password = password; // Will be encrypted by trigger\n        if (passive !== undefined) updateData.passive = passive;\n        if (root_path !== undefined) updateData.root_path = root_path;\n\n        const { data: site, error } = await supabase\n            .from('sites')\n            .update(updateData)\n            .eq('id', siteId)\n            .eq('user_id', userId)\n            .select('id, name, host, port, username, root_path, created_at, updated_at')\n            .single();\n\n        if (error) {\n            if (error.code === 'PGRST116') {\n                return res.status(404).json({\n                    success: false,\n                    error: 'Site not found'\n                });\n            }\n            console.error('Error updating site:', error);\n            return res.status(500).json({\n                success: false,\n                error: 'Failed to update site'\n            });\n        }\n\n        res.json({\n            success: true,\n            data: {\n                site\n            }\n        });\n    } catch (error) {\n        console.error('Site update error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Internal server error'\n        });\n    }\n});\n\n/**\n * DELETE /api/sites/:id - Delete a site\n */\nrouter.delete('/:id', async (req, res) => {\n    try {\n        const userId = req.user.id;\n        const siteId = req.params.id;\n\n        const { error } = await supabase\n            .from('sites')\n            .delete()\n            .eq('id', siteId)\n            .eq('user_id', userId);\n\n        if (error) {\n            console.error('Error deleting site:', error);\n            return res.status(500).json({\n                success: false,\n                error: 'Failed to delete site'\n            });\n        }\n\n        res.json({\n            success: true,\n            message: 'Site deleted successfully'\n        });\n    } catch (error) {\n        console.error('Site deletion error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Internal server error'\n        });\n    }\n});\n\n/**\n * POST /api/sites/:id/backup - Create and download a backup of the site\n */\nrouter.post('/:id/backup', async (req, res) => {\n    try {\n        const userId = req.user.id;\n        const siteId = req.params.id;\n\n        // Get site details\n        const { data: site, error: siteError } = await supabase\n            .from('sites')\n            .select('*')\n            .eq('id', siteId)\n            .eq('user_id', userId)\n            .single();\n\n        if (siteError || !site) {\n            return res.status(404).json({\n                success: false,\n                error: 'Site not found'\n            });\n        }\n\n        // Import FTP library\n        const Client = require('basic-ftp');\n        const archiver = require('archiver');\n        const path = require('path');\n        const fs = require('fs');\n        const os = require('os');\n\n        const client = new Client();\n        \n        try {\n            // Connect to FTP\n            await client.access({\n                host: site.host,\n                port: site.port,\n                user: site.username,\n                password: site.password, // Will be decrypted by database\n                secure: false\n            });\n\n            // Create temporary directory for backup\n            const tempDir = path.join(os.tmpdir(), `backup-${siteId}-${Date.now()}`);\n            fs.mkdirSync(tempDir, { recursive: true });\n\n            // Download files to temp directory\n            await client.downloadToDir(tempDir, site.root_path || '/');\n            \n            // Create zip archive\n            const archive = archiver('zip', { zlib: { level: 9 } });\n            \n            res.setHeader('Content-Type', 'application/zip');\n            res.setHeader('Content-Disposition', `attachment; filename=\"backup-${site.name}-${new Date().toISOString().split('T')[0]}.zip\"`);\n            \n            archive.pipe(res);\n            archive.directory(tempDir, false);\n            await archive.finalize();\n\n            // Cleanup temp directory\n            fs.rmSync(tempDir, { recursive: true, force: true });\n\n        } catch (ftpError) {\n            console.error('FTP backup error:', ftpError);\n            res.status(500).json({\n                success: false,\n                error: 'Failed to create backup: ' + ftpError.message\n            });\n        } finally {\n            client.close();\n        }\n\n    } catch (error) {\n        console.error('Backup error:', error);\n        res.status(500).json({\n            success: false,\n            error: 'Internal server error'\n        });\n    }\n});\n\nmodule.exports = router;",
      "size": "9.4KB",
      "targetPath": "/var/www/html/api/sites-routes.js",
      "hash": "7ae94d68ce9f85f90c266fd174c14ade"
    },
    "api/stripe-routes.js": {
      "content": "/**\n * Stripe Payment Processing Routes\n * Handles subscription creation, webhooks, and billing management\n */\n\nconst express = require('express');\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\nconst { createClient } = require('@supabase/supabase-js');\n\nconst router = express.Router();\n\n// Initialize Supabase client\nconst supabase = createClient(\n    process.env.SUPABASE_URL,\n    process.env.SUPABASE_SERVICE_KEY\n);\n\n// Pricing configuration\nconst PRICING = {\n    pro: {\n        monthly: {\n            priceId: 'price_1QXbhKAuYycpID5hJUv8QE1H',\n            amount: 5000, // $50.00 in cents\n            interval: 'month'\n        },\n        yearly: {\n            priceId: 'price_1QXbhKAuYycpID5hJUv8QE1H_yearly',\n            amount: 4000, // $40.00 in cents (monthly equivalent)\n            interval: 'year'\n        }\n    },\n    lifetime: {\n        'one-time': {\n            priceId: 'price_1QXbhKAuYycpID5hJUv8QE1H_lifetime',\n            amount: 49700, // $497.00 in cents\n            mode: 'payment'\n        }\n    }\n};\n\n/**\n * Create Stripe Checkout Session\n */\nrouter.post('/create-checkout-session', async (req, res) => {\n    try {\n        const { priceId, userId, userEmail, plan, billing } = req.body;\n        \n        if (!priceId || !userId || !userEmail) {\n            return res.status(400).json({\n                error: 'Missing required parameters'\n            });\n        }\n        \n        // Verify user exists\n        const { data: userProfile, error: userError } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .eq('id', userId)\n            .single();\n        \n        if (userError || !userProfile) {\n            return res.status(404).json({\n                error: 'User not found'\n            });\n        }\n        \n        const isLifetime = plan === 'lifetime';\n        const baseUrl = process.env.NODE_ENV === 'production' \n            ? 'https://ezedit.co' \n            : `http://localhost:${process.env.PORT || 3000}`;\n        \n        // Create checkout session\n        const session = await stripe.checkout.sessions.create({\n            customer_email: userEmail,\n            mode: isLifetime ? 'payment' : 'subscription',\n            payment_method_types: ['card'],\n            line_items: [\n                {\n                    price: priceId,\n                    quantity: 1,\n                }\n            ],\n            metadata: {\n                userId: userId,\n                plan: plan,\n                billing: billing\n            },\n            subscription_data: isLifetime ? undefined : {\n                metadata: {\n                    userId: userId,\n                    plan: plan,\n                    billing: billing\n                },\n                trial_period_days: userProfile.subscription_status === 'trial' ? 0 : 7\n            },\n            success_url: `${baseUrl}/billing/success?session_id={CHECKOUT_SESSION_ID}`,\n            cancel_url: `${baseUrl}/pricing.html?canceled=true`,\n            automatic_tax: {\n                enabled: true,\n            },\n            tax_id_collection: {\n                enabled: true,\n            },\n            billing_address_collection: 'required',\n            allow_promotion_codes: true\n        });\n        \n        res.json({\n            sessionId: session.id,\n            url: session.url\n        });\n        \n    } catch (error) {\n        console.error('Checkout session creation error:', error);\n        res.status(500).json({\n            error: error.message\n        });\n    }\n});\n\n/**\n * Create Customer Portal Session\n */\nrouter.post('/create-portal-session', async (req, res) => {\n    try {\n        const { userId } = req.body;\n        \n        if (!userId) {\n            return res.status(400).json({\n                error: 'User ID is required'\n            });\n        }\n        \n        // Get user's Stripe customer ID\n        const { data: userProfile, error } = await supabase\n            .from('user_profiles')\n            .select('stripe_customer_id')\n            .eq('id', userId)\n            .single();\n        \n        if (error || !userProfile?.stripe_customer_id) {\n            return res.status(404).json({\n                error: 'Customer not found'\n            });\n        }\n        \n        const baseUrl = process.env.NODE_ENV === 'production' \n            ? 'https://ezedit.co' \n            : `http://localhost:${process.env.PORT || 3000}`;\n        \n        const session = await stripe.billingPortal.sessions.create({\n            customer: userProfile.stripe_customer_id,\n            return_url: `${baseUrl}/billing`,\n        });\n        \n        res.json({\n            url: session.url\n        });\n        \n    } catch (error) {\n        console.error('Portal session creation error:', error);\n        res.status(500).json({\n            error: error.message\n        });\n    }\n});\n\n/**\n * Stripe Webhook Handler\n */\nrouter.post('/webhook', express.raw({type: 'application/json'}), async (req, res) => {\n    const sig = req.headers['stripe-signature'];\n    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n    \n    let event;\n    \n    try {\n        event = stripe.webhooks.constructEvent(req.body, sig, webhookSecret);\n    } catch (err) {\n        console.error('Webhook signature verification failed:', err.message);\n        return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n    \n    try {\n        switch (event.type) {\n            case 'checkout.session.completed':\n                await handleCheckoutCompleted(event.data.object);\n                break;\n                \n            case 'customer.subscription.created':\n                await handleSubscriptionCreated(event.data.object);\n                break;\n                \n            case 'customer.subscription.updated':\n                await handleSubscriptionUpdated(event.data.object);\n                break;\n                \n            case 'customer.subscription.deleted':\n                await handleSubscriptionDeleted(event.data.object);\n                break;\n                \n            case 'invoice.payment_succeeded':\n                await handlePaymentSucceeded(event.data.object);\n                break;\n                \n            case 'invoice.payment_failed':\n                await handlePaymentFailed(event.data.object);\n                break;\n                \n            default:\n                console.log(`Unhandled event type: ${event.type}`);\n        }\n        \n        res.json({received: true});\n        \n    } catch (error) {\n        console.error('Webhook handler error:', error);\n        res.status(500).json({error: error.message});\n    }\n});\n\n/**\n * Handle successful checkout completion\n */\nasync function handleCheckoutCompleted(session) {\n    const userId = session.metadata.userId;\n    const plan = session.metadata.plan;\n    const billing = session.metadata.billing;\n    \n    if (!userId) {\n        console.error('No userId in checkout session metadata');\n        return;\n    }\n    \n    const updateData = {\n        stripe_customer_id: session.customer,\n        subscription_plan: plan,\n        subscription_billing: billing,\n        subscription_status: 'active',\n        trial_ends_at: null\n    };\n    \n    if (session.mode === 'subscription') {\n        updateData.stripe_subscription_id = session.subscription;\n    } else {\n        // One-time payment (lifetime)\n        updateData.subscription_status = 'lifetime';\n        updateData.lifetime_purchase_date = new Date().toISOString();\n    }\n    \n    await supabase\n        .from('user_profiles')\n        .update(updateData)\n        .eq('id', userId);\n    \n    console.log(`Subscription activated for user ${userId}: ${plan} (${billing})`);\n}\n\n/**\n * Handle subscription creation\n */\nasync function handleSubscriptionCreated(subscription) {\n    const userId = subscription.metadata.userId;\n    \n    if (!userId) return;\n    \n    await supabase\n        .from('user_profiles')\n        .update({\n            stripe_subscription_id: subscription.id,\n            subscription_status: subscription.status,\n            current_period_start: new Date(subscription.current_period_start * 1000).toISOString(),\n            current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),\n            trial_ends_at: subscription.trial_end ? new Date(subscription.trial_end * 1000).toISOString() : null\n        })\n        .eq('id', userId);\n        \n    console.log(`Subscription created for user ${userId}: ${subscription.id}`);\n}\n\n/**\n * Handle subscription updates\n */\nasync function handleSubscriptionUpdated(subscription) {\n    const userId = subscription.metadata.userId;\n    \n    if (!userId) return;\n    \n    await supabase\n        .from('user_profiles')\n        .update({\n            subscription_status: subscription.status,\n            current_period_start: new Date(subscription.current_period_start * 1000).toISOString(),\n            current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),\n            trial_ends_at: subscription.trial_end ? new Date(subscription.trial_end * 1000).toISOString() : null\n        })\n        .eq('id', userId);\n        \n    console.log(`Subscription updated for user ${userId}: ${subscription.status}`);\n}\n\n/**\n * Handle subscription cancellation\n */\nasync function handleSubscriptionDeleted(subscription) {\n    const userId = subscription.metadata.userId;\n    \n    if (!userId) return;\n    \n    await supabase\n        .from('user_profiles')\n        .update({\n            subscription_status: 'canceled',\n            stripe_subscription_id: null,\n            current_period_start: null,\n            current_period_end: null\n        })\n        .eq('id', userId);\n        \n    console.log(`Subscription canceled for user ${userId}`);\n}\n\n/**\n * Handle successful payment\n */\nasync function handlePaymentSucceeded(invoice) {\n    const subscription = await stripe.subscriptions.retrieve(invoice.subscription);\n    const userId = subscription.metadata.userId;\n    \n    if (!userId) return;\n    \n    // Update payment status and extend subscription\n    await supabase\n        .from('user_profiles')\n        .update({\n            subscription_status: 'active',\n            last_payment_date: new Date().toISOString(),\n            current_period_start: new Date(subscription.current_period_start * 1000).toISOString(),\n            current_period_end: new Date(subscription.current_period_end * 1000).toISOString()\n        })\n        .eq('id', userId);\n        \n    console.log(`Payment succeeded for user ${userId}: ${invoice.amount_paid / 100}`);\n}\n\n/**\n * Handle failed payment\n */\nasync function handlePaymentFailed(invoice) {\n    const subscription = await stripe.subscriptions.retrieve(invoice.subscription);\n    const userId = subscription.metadata.userId;\n    \n    if (!userId) return;\n    \n    // Mark subscription as past due\n    await supabase\n        .from('user_profiles')\n        .update({\n            subscription_status: 'past_due',\n            last_payment_attempt: new Date().toISOString()\n        })\n        .eq('id', userId);\n        \n    console.log(`Payment failed for user ${userId}`);\n}\n\n/**\n * Get subscription status\n */\nrouter.get('/subscription-status/:userId', async (req, res) => {\n    try {\n        const { userId } = req.params;\n        \n        const { data: userProfile, error } = await supabase\n            .from('user_profiles')\n            .select('subscription_status, subscription_plan, subscription_billing, current_period_end, trial_ends_at')\n            .eq('id', userId)\n            .single();\n        \n        if (error) {\n            return res.status(404).json({\n                error: 'User not found'\n            });\n        }\n        \n        res.json({\n            status: userProfile.subscription_status,\n            plan: userProfile.subscription_plan,\n            billing: userProfile.subscription_billing,\n            currentPeriodEnd: userProfile.current_period_end,\n            trialEndsAt: userProfile.trial_ends_at\n        });\n        \n    } catch (error) {\n        console.error('Subscription status error:', error);\n        res.status(500).json({\n            error: error.message\n        });\n    }\n});\n\nmodule.exports = router;",
      "size": "11.9KB",
      "targetPath": "/var/www/html/api/stripe-routes.js",
      "hash": "45385625dc1fc02c419de81e3eb303b7"
    }
  },
  "commands": [
    "scp \"signup.html\" root@159.65.224.175:\"/var/www/html/signup.html\"",
    "scp \"pricing.html\" root@159.65.224.175:\"/var/www/html/pricing.html\"",
    "scp \"billing.html\" root@159.65.224.175:\"/var/www/html/billing.html\"",
    "scp \"api/ai-routes.js\" root@159.65.224.175:\"/var/www/html/api/ai-routes.js\"",
    "scp \"api/ftp-routes.js\" root@159.65.224.175:\"/var/www/html/api/ftp-routes.js\"",
    "scp \"api/sites-routes.js\" root@159.65.224.175:\"/var/www/html/api/sites-routes.js\"",
    "scp \"api/stripe-routes.js\" root@159.65.224.175:\"/var/www/html/api/stripe-routes.js\""
  ],
  "tests": [
    "curl -I http://159.65.224.175/signup.html",
    "curl -I http://159.65.224.175/pricing.html",
    "curl -I http://159.65.224.175/billing.html"
  ]
}